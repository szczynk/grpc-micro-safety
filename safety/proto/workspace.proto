syntax = "proto3";

package pb;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "workspace_messages.proto";

option go_package = "./;pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "Workspace API";
		version: "0.0.1";
	};
  security_definitions: {
    security: {
      key: "bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Authentication token, prefixed by Bearer: Bearer <token>"
      }
    }
  };
  security: {
    security_requirement: {
      key: "bearer"
    }
  };
};

service WorkspaceService{
  rpc CreateWorkspace (CreateWorkspaceRequest) returns (CreateWorkspaceResponse) {
    option (google.api.http) = {
      post: "/workspaces"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to create a new workspace";
      summary: "Create a new workspace";
    };
  };
  rpc DeleteWorkspaceById (DeleteWorkspaceByIdRequest) returns (DeleteWorkspaceByIdResponse) {
    option (google.api.http) = {
      delete: "/workspaces/{user_id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to delete user from workspace by user id";
      summary: "Delete user from workspace by user id";
    };
  };

  rpc FindWorkspaces (FindWorkspacesRequest)returns (FindWorkspacesResponse){
    option (google.api.http) = {
			get: "/workspaces"
		};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to find workspaces";
      summary: "Find Workspaces";
    };
  }
}