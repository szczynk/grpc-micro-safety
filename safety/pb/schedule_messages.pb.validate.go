// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: schedule_messages.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Schedule with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Schedule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Schedule with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScheduleMultiError, or nil
// if none found.
func (m *Schedule) ValidateAll() error {
	return m.validate(true)
}

func (m *Schedule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Capacity

	// no validation rules for TotalCapacity

	// no validation rules for OfficeId

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ScheduleMultiError(errors)
	}

	return nil
}

// ScheduleMultiError is an error wrapping multiple validation errors returned
// by Schedule.ValidateAll() if the designated constraints aren't met.
type ScheduleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScheduleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScheduleMultiError) AllErrors() []error { return m }

// ScheduleValidationError is the validation error returned by
// Schedule.Validate if the designated constraints aren't met.
type ScheduleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduleValidationError) ErrorName() string { return "ScheduleValidationError" }

// Error satisfies the builtin error interface
func (e ScheduleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchedule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduleValidationError{}

// Validate checks the field values on ScheduleWithOffice with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScheduleWithOffice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScheduleWithOffice with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScheduleWithOfficeMultiError, or nil if none found.
func (m *ScheduleWithOffice) ValidateAll() error {
	return m.validate(true)
}

func (m *ScheduleWithOffice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Capacity

	// no validation rules for TotalCapacity

	// no validation rules for OfficeId

	// no validation rules for OfficeName

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleWithOfficeValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleWithOfficeValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleWithOfficeValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleWithOfficeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleWithOfficeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleWithOfficeValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleWithOfficeValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleWithOfficeValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleWithOfficeValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ScheduleWithOfficeMultiError(errors)
	}

	return nil
}

// ScheduleWithOfficeMultiError is an error wrapping multiple validation errors
// returned by ScheduleWithOffice.ValidateAll() if the designated constraints
// aren't met.
type ScheduleWithOfficeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScheduleWithOfficeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScheduleWithOfficeMultiError) AllErrors() []error { return m }

// ScheduleWithOfficeValidationError is the validation error returned by
// ScheduleWithOffice.Validate if the designated constraints aren't met.
type ScheduleWithOfficeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduleWithOfficeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduleWithOfficeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduleWithOfficeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduleWithOfficeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduleWithOfficeValidationError) ErrorName() string {
	return "ScheduleWithOfficeValidationError"
}

// Error satisfies the builtin error interface
func (e ScheduleWithOfficeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduleWithOffice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduleWithOfficeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduleWithOfficeValidationError{}

// Validate checks the field values on CreateScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateScheduleRequestMultiError, or nil if none found.
func (m *CreateScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOfficeId() <= 0 {
		err := CreateScheduleRequestValidationError{
			field:  "OfficeId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTotalCapacity() <= 0 {
		err := CreateScheduleRequestValidationError{
			field:  "TotalCapacity",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetMonth(); val < 1 || val > 12 {
		err := CreateScheduleRequestValidationError{
			field:  "Month",
			reason: "value must be inside range [1, 12]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetYear(); val < 2000 || val > 3000 {
		err := CreateScheduleRequestValidationError{
			field:  "Year",
			reason: "value must be inside range [2000, 3000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateScheduleRequestMultiError(errors)
	}

	return nil
}

// CreateScheduleRequestMultiError is an error wrapping multiple validation
// errors returned by CreateScheduleRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateScheduleRequestMultiError) AllErrors() []error { return m }

// CreateScheduleRequestValidationError is the validation error returned by
// CreateScheduleRequest.Validate if the designated constraints aren't met.
type CreateScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateScheduleRequestValidationError) ErrorName() string {
	return "CreateScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateScheduleRequestValidationError{}

// Validate checks the field values on CreateScheduleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateScheduleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateScheduleResponseMultiError, or nil if none found.
func (m *CreateScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateScheduleResponseMultiError(errors)
	}

	return nil
}

// CreateScheduleResponseMultiError is an error wrapping multiple validation
// errors returned by CreateScheduleResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateScheduleResponseMultiError) AllErrors() []error { return m }

// CreateScheduleResponseValidationError is the validation error returned by
// CreateScheduleResponse.Validate if the designated constraints aren't met.
type CreateScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateScheduleResponseValidationError) ErrorName() string {
	return "CreateScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateScheduleResponseValidationError{}

// Validate checks the field values on UpdateScheduleByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateScheduleByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateScheduleByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateScheduleByIdRequestMultiError, or nil if none found.
func (m *UpdateScheduleByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateScheduleByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateScheduleByIdRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTotalCapacity() <= 0 {
		err := UpdateScheduleByIdRequestValidationError{
			field:  "TotalCapacity",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateScheduleByIdRequestMultiError(errors)
	}

	return nil
}

// UpdateScheduleByIdRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateScheduleByIdRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateScheduleByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateScheduleByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateScheduleByIdRequestMultiError) AllErrors() []error { return m }

// UpdateScheduleByIdRequestValidationError is the validation error returned by
// UpdateScheduleByIdRequest.Validate if the designated constraints aren't met.
type UpdateScheduleByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateScheduleByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateScheduleByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateScheduleByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateScheduleByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateScheduleByIdRequestValidationError) ErrorName() string {
	return "UpdateScheduleByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateScheduleByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateScheduleByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateScheduleByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateScheduleByIdRequestValidationError{}

// Validate checks the field values on UpdateScheduleByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateScheduleByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateScheduleByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateScheduleByIdResponseMultiError, or nil if none found.
func (m *UpdateScheduleByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateScheduleByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateScheduleByIdResponseValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateScheduleByIdResponseValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateScheduleByIdResponseValidationError{
				field:  "Schedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateScheduleByIdResponseMultiError(errors)
	}

	return nil
}

// UpdateScheduleByIdResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateScheduleByIdResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateScheduleByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateScheduleByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateScheduleByIdResponseMultiError) AllErrors() []error { return m }

// UpdateScheduleByIdResponseValidationError is the validation error returned
// by UpdateScheduleByIdResponse.Validate if the designated constraints aren't met.
type UpdateScheduleByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateScheduleByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateScheduleByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateScheduleByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateScheduleByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateScheduleByIdResponseValidationError) ErrorName() string {
	return "UpdateScheduleByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateScheduleByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateScheduleByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateScheduleByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateScheduleByIdResponseValidationError{}

// Validate checks the field values on DeleteScheduleByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteScheduleByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteScheduleByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteScheduleByIdRequestMultiError, or nil if none found.
func (m *DeleteScheduleByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteScheduleByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteScheduleByIdRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteScheduleByIdRequestMultiError(errors)
	}

	return nil
}

// DeleteScheduleByIdRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteScheduleByIdRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteScheduleByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteScheduleByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteScheduleByIdRequestMultiError) AllErrors() []error { return m }

// DeleteScheduleByIdRequestValidationError is the validation error returned by
// DeleteScheduleByIdRequest.Validate if the designated constraints aren't met.
type DeleteScheduleByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteScheduleByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteScheduleByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteScheduleByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteScheduleByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteScheduleByIdRequestValidationError) ErrorName() string {
	return "DeleteScheduleByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteScheduleByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteScheduleByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteScheduleByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteScheduleByIdRequestValidationError{}

// Validate checks the field values on DeleteScheduleByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteScheduleByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteScheduleByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteScheduleByIdResponseMultiError, or nil if none found.
func (m *DeleteScheduleByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteScheduleByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteScheduleByIdResponseMultiError(errors)
	}

	return nil
}

// DeleteScheduleByIdResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteScheduleByIdResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteScheduleByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteScheduleByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteScheduleByIdResponseMultiError) AllErrors() []error { return m }

// DeleteScheduleByIdResponseValidationError is the validation error returned
// by DeleteScheduleByIdResponse.Validate if the designated constraints aren't met.
type DeleteScheduleByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteScheduleByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteScheduleByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteScheduleByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteScheduleByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteScheduleByIdResponseValidationError) ErrorName() string {
	return "DeleteScheduleByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteScheduleByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteScheduleByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteScheduleByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteScheduleByIdResponseValidationError{}

// Validate checks the field values on FindSchedulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindSchedulesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindSchedulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindSchedulesRequestMultiError, or nil if none found.
func (m *FindSchedulesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindSchedulesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OfficeId

	if val := m.GetMonth(); val < 1 || val > 12 {
		err := FindSchedulesRequestValidationError{
			field:  "Month",
			reason: "value must be inside range [1, 12]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetYear(); val < 2000 || val > 3000 {
		err := FindSchedulesRequestValidationError{
			field:  "Year",
			reason: "value must be inside range [2000, 3000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for Sort

	if len(errors) > 0 {
		return FindSchedulesRequestMultiError(errors)
	}

	return nil
}

// FindSchedulesRequestMultiError is an error wrapping multiple validation
// errors returned by FindSchedulesRequest.ValidateAll() if the designated
// constraints aren't met.
type FindSchedulesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindSchedulesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindSchedulesRequestMultiError) AllErrors() []error { return m }

// FindSchedulesRequestValidationError is the validation error returned by
// FindSchedulesRequest.Validate if the designated constraints aren't met.
type FindSchedulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindSchedulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindSchedulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindSchedulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindSchedulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindSchedulesRequestValidationError) ErrorName() string {
	return "FindSchedulesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindSchedulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindSchedulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindSchedulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindSchedulesRequestValidationError{}

// Validate checks the field values on FindSchedulesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindSchedulesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindSchedulesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindSchedulesResponseMultiError, or nil if none found.
func (m *FindSchedulesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindSchedulesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalCount

	// no validation rules for TotalPages

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for HasMore

	for idx, item := range m.GetSchedules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindSchedulesResponseValidationError{
						field:  fmt.Sprintf("Schedules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindSchedulesResponseValidationError{
						field:  fmt.Sprintf("Schedules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindSchedulesResponseValidationError{
					field:  fmt.Sprintf("Schedules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FindSchedulesResponseMultiError(errors)
	}

	return nil
}

// FindSchedulesResponseMultiError is an error wrapping multiple validation
// errors returned by FindSchedulesResponse.ValidateAll() if the designated
// constraints aren't met.
type FindSchedulesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindSchedulesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindSchedulesResponseMultiError) AllErrors() []error { return m }

// FindSchedulesResponseValidationError is the validation error returned by
// FindSchedulesResponse.Validate if the designated constraints aren't met.
type FindSchedulesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindSchedulesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindSchedulesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindSchedulesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindSchedulesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindSchedulesResponseValidationError) ErrorName() string {
	return "FindSchedulesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindSchedulesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindSchedulesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindSchedulesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindSchedulesResponseValidationError{}

// Validate checks the field values on FindScheduleByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindScheduleByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindScheduleByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindScheduleByIdRequestMultiError, or nil if none found.
func (m *FindScheduleByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindScheduleByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := FindScheduleByIdRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FindScheduleByIdRequestMultiError(errors)
	}

	return nil
}

// FindScheduleByIdRequestMultiError is an error wrapping multiple validation
// errors returned by FindScheduleByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type FindScheduleByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindScheduleByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindScheduleByIdRequestMultiError) AllErrors() []error { return m }

// FindScheduleByIdRequestValidationError is the validation error returned by
// FindScheduleByIdRequest.Validate if the designated constraints aren't met.
type FindScheduleByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindScheduleByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindScheduleByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindScheduleByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindScheduleByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindScheduleByIdRequestValidationError) ErrorName() string {
	return "FindScheduleByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindScheduleByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindScheduleByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindScheduleByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindScheduleByIdRequestValidationError{}

// Validate checks the field values on FindScheduleByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindScheduleByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindScheduleByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindScheduleByIdResponseMultiError, or nil if none found.
func (m *FindScheduleByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindScheduleByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindScheduleByIdResponseValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindScheduleByIdResponseValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindScheduleByIdResponseValidationError{
				field:  "Schedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindScheduleByIdResponseMultiError(errors)
	}

	return nil
}

// FindScheduleByIdResponseMultiError is an error wrapping multiple validation
// errors returned by FindScheduleByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type FindScheduleByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindScheduleByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindScheduleByIdResponseMultiError) AllErrors() []error { return m }

// FindScheduleByIdResponseValidationError is the validation error returned by
// FindScheduleByIdResponse.Validate if the designated constraints aren't met.
type FindScheduleByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindScheduleByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindScheduleByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindScheduleByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindScheduleByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindScheduleByIdResponseValidationError) ErrorName() string {
	return "FindScheduleByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindScheduleByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindScheduleByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindScheduleByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindScheduleByIdResponseValidationError{}
