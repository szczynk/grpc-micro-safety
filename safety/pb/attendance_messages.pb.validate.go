// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: attendance_messages.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _attendance_messages_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Attendance with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Attendance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Attendance with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AttendanceMultiError, or
// nil if none found.
func (m *Attendance) ValidateAll() error {
	return m.validate(true)
}

func (m *Attendance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for ScheduleId

	// no validation rules for ImageUrl

	// no validation rules for Description

	// no validation rules for AdminUsername

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetStatusAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttendanceValidationError{
					field:  "StatusAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttendanceValidationError{
					field:  "StatusAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatusAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttendanceValidationError{
				field:  "StatusAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StatusInfo

	// no validation rules for CheckTemperature

	// no validation rules for CheckStatus

	if all {
		switch v := interface{}(m.GetCheckIn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttendanceValidationError{
					field:  "CheckIn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttendanceValidationError{
					field:  "CheckIn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCheckIn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttendanceValidationError{
				field:  "CheckIn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCheckOut()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttendanceValidationError{
					field:  "CheckOut",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttendanceValidationError{
					field:  "CheckOut",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCheckOut()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttendanceValidationError{
				field:  "CheckOut",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttendanceValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttendanceValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttendanceValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttendanceValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttendanceValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttendanceValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AttendanceMultiError(errors)
	}

	return nil
}

// AttendanceMultiError is an error wrapping multiple validation errors
// returned by Attendance.ValidateAll() if the designated constraints aren't met.
type AttendanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttendanceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttendanceMultiError) AllErrors() []error { return m }

// AttendanceValidationError is the validation error returned by
// Attendance.Validate if the designated constraints aren't met.
type AttendanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttendanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttendanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttendanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttendanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttendanceValidationError) ErrorName() string { return "AttendanceValidationError" }

// Error satisfies the builtin error interface
func (e AttendanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttendance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttendanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttendanceValidationError{}

// Validate checks the field values on AttendanceDetail with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AttendanceDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttendanceDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AttendanceDetailMultiError, or nil if none found.
func (m *AttendanceDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *AttendanceDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for UserUsername

	// no validation rules for UserAvatar

	// no validation rules for ScheduleId

	if all {
		switch v := interface{}(m.GetScheduleDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttendanceDetailValidationError{
					field:  "ScheduleDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttendanceDetailValidationError{
					field:  "ScheduleDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScheduleDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttendanceDetailValidationError{
				field:  "ScheduleDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OfficeId

	// no validation rules for OfficeName

	// no validation rules for ImageUrl

	// no validation rules for Description

	// no validation rules for AdminUsername

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetStatusAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttendanceDetailValidationError{
					field:  "StatusAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttendanceDetailValidationError{
					field:  "StatusAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatusAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttendanceDetailValidationError{
				field:  "StatusAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StatusInfo

	// no validation rules for CheckTemperature

	// no validation rules for CheckStatus

	if all {
		switch v := interface{}(m.GetCheckIn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttendanceDetailValidationError{
					field:  "CheckIn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttendanceDetailValidationError{
					field:  "CheckIn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCheckIn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttendanceDetailValidationError{
				field:  "CheckIn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCheckOut()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttendanceDetailValidationError{
					field:  "CheckOut",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttendanceDetailValidationError{
					field:  "CheckOut",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCheckOut()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttendanceDetailValidationError{
				field:  "CheckOut",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttendanceDetailValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttendanceDetailValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttendanceDetailValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttendanceDetailValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttendanceDetailValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttendanceDetailValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AttendanceDetailMultiError(errors)
	}

	return nil
}

// AttendanceDetailMultiError is an error wrapping multiple validation errors
// returned by AttendanceDetail.ValidateAll() if the designated constraints
// aren't met.
type AttendanceDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttendanceDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttendanceDetailMultiError) AllErrors() []error { return m }

// AttendanceDetailValidationError is the validation error returned by
// AttendanceDetail.Validate if the designated constraints aren't met.
type AttendanceDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttendanceDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttendanceDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttendanceDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttendanceDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttendanceDetailValidationError) ErrorName() string { return "AttendanceDetailValidationError" }

// Error satisfies the builtin error interface
func (e AttendanceDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttendanceDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttendanceDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttendanceDetailValidationError{}

// Validate checks the field values on CreateAttendanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAttendanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAttendanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAttendanceRequestMultiError, or nil if none found.
func (m *CreateAttendanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAttendanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = CreateAttendanceRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetScheduleId() <= 0 {
		err := CreateAttendanceRequestValidationError{
			field:  "ScheduleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if utf8.RuneCountInString(m.GetImageUrl()) < 8 {
		err := CreateAttendanceRequestValidationError{
			field:  "ImageUrl",
			reason: "value length must be at least 8 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateAttendanceRequestMultiError(errors)
	}

	return nil
}

func (m *CreateAttendanceRequest) _validateUuid(uuid string) error {
	if matched := _attendance_messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateAttendanceRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAttendanceRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAttendanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAttendanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAttendanceRequestMultiError) AllErrors() []error { return m }

// CreateAttendanceRequestValidationError is the validation error returned by
// CreateAttendanceRequest.Validate if the designated constraints aren't met.
type CreateAttendanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAttendanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAttendanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAttendanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAttendanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAttendanceRequestValidationError) ErrorName() string {
	return "CreateAttendanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAttendanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAttendanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAttendanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAttendanceRequestValidationError{}

// Validate checks the field values on CreateAttendanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAttendanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAttendanceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAttendanceResponseMultiError, or nil if none found.
func (m *CreateAttendanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAttendanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAttendance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAttendanceResponseValidationError{
					field:  "Attendance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAttendanceResponseValidationError{
					field:  "Attendance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttendance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAttendanceResponseValidationError{
				field:  "Attendance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAttendanceResponseMultiError(errors)
	}

	return nil
}

// CreateAttendanceResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAttendanceResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAttendanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAttendanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAttendanceResponseMultiError) AllErrors() []error { return m }

// CreateAttendanceResponseValidationError is the validation error returned by
// CreateAttendanceResponse.Validate if the designated constraints aren't met.
type CreateAttendanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAttendanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAttendanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAttendanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAttendanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAttendanceResponseValidationError) ErrorName() string {
	return "CreateAttendanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAttendanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAttendanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAttendanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAttendanceResponseValidationError{}

// Validate checks the field values on UpdateAttendanceByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAttendanceByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAttendanceByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAttendanceByIdRequestMultiError, or nil if none found.
func (m *UpdateAttendanceByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAttendanceByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateAttendanceByIdRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetScheduleId() <= 0 {
		err := UpdateAttendanceByIdRequestValidationError{
			field:  "ScheduleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAdminUsername()) < 3 {
		err := UpdateAttendanceByIdRequestValidationError{
			field:  "AdminUsername",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _UpdateAttendanceByIdRequest_Status_InLookup[m.GetStatus()]; !ok {
		err := UpdateAttendanceByIdRequestValidationError{
			field:  "Status",
			reason: "value must be in list [approved pending rejected]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StatusInfo

	if len(errors) > 0 {
		return UpdateAttendanceByIdRequestMultiError(errors)
	}

	return nil
}

// UpdateAttendanceByIdRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateAttendanceByIdRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateAttendanceByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAttendanceByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAttendanceByIdRequestMultiError) AllErrors() []error { return m }

// UpdateAttendanceByIdRequestValidationError is the validation error returned
// by UpdateAttendanceByIdRequest.Validate if the designated constraints
// aren't met.
type UpdateAttendanceByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAttendanceByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAttendanceByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAttendanceByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAttendanceByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAttendanceByIdRequestValidationError) ErrorName() string {
	return "UpdateAttendanceByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAttendanceByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAttendanceByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAttendanceByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAttendanceByIdRequestValidationError{}

var _UpdateAttendanceByIdRequest_Status_InLookup = map[string]struct{}{
	"approved": {},
	"pending":  {},
	"rejected": {},
}

// Validate checks the field values on UpdateAttendanceByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAttendanceByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAttendanceByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAttendanceByIdResponseMultiError, or nil if none found.
func (m *UpdateAttendanceByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAttendanceByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAttendance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAttendanceByIdResponseValidationError{
					field:  "Attendance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAttendanceByIdResponseValidationError{
					field:  "Attendance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttendance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAttendanceByIdResponseValidationError{
				field:  "Attendance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAttendanceByIdResponseMultiError(errors)
	}

	return nil
}

// UpdateAttendanceByIdResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateAttendanceByIdResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateAttendanceByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAttendanceByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAttendanceByIdResponseMultiError) AllErrors() []error { return m }

// UpdateAttendanceByIdResponseValidationError is the validation error returned
// by UpdateAttendanceByIdResponse.Validate if the designated constraints
// aren't met.
type UpdateAttendanceByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAttendanceByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAttendanceByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAttendanceByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAttendanceByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAttendanceByIdResponseValidationError) ErrorName() string {
	return "UpdateAttendanceByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAttendanceByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAttendanceByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAttendanceByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAttendanceByIdResponseValidationError{}

// Validate checks the field values on DeleteAttendanceByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAttendanceByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAttendanceByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAttendanceByIdRequestMultiError, or nil if none found.
func (m *DeleteAttendanceByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAttendanceByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteAttendanceByIdRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteAttendanceByIdRequestMultiError(errors)
	}

	return nil
}

// DeleteAttendanceByIdRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteAttendanceByIdRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteAttendanceByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAttendanceByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAttendanceByIdRequestMultiError) AllErrors() []error { return m }

// DeleteAttendanceByIdRequestValidationError is the validation error returned
// by DeleteAttendanceByIdRequest.Validate if the designated constraints
// aren't met.
type DeleteAttendanceByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAttendanceByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAttendanceByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAttendanceByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAttendanceByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAttendanceByIdRequestValidationError) ErrorName() string {
	return "DeleteAttendanceByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAttendanceByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAttendanceByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAttendanceByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAttendanceByIdRequestValidationError{}

// Validate checks the field values on DeleteAttendanceByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAttendanceByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAttendanceByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAttendanceByIdResponseMultiError, or nil if none found.
func (m *DeleteAttendanceByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAttendanceByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteAttendanceByIdResponseMultiError(errors)
	}

	return nil
}

// DeleteAttendanceByIdResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteAttendanceByIdResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteAttendanceByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAttendanceByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAttendanceByIdResponseMultiError) AllErrors() []error { return m }

// DeleteAttendanceByIdResponseValidationError is the validation error returned
// by DeleteAttendanceByIdResponse.Validate if the designated constraints
// aren't met.
type DeleteAttendanceByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAttendanceByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAttendanceByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAttendanceByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAttendanceByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAttendanceByIdResponseValidationError) ErrorName() string {
	return "DeleteAttendanceByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAttendanceByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAttendanceByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAttendanceByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAttendanceByIdResponseValidationError{}

// Validate checks the field values on FindAttendancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindAttendancesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindAttendancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindAttendancesRequestMultiError, or nil if none found.
func (m *FindAttendancesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindAttendancesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ScheduleId

	// no validation rules for AdminUsername

	// no validation rules for Status

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for Sort

	if len(errors) > 0 {
		return FindAttendancesRequestMultiError(errors)
	}

	return nil
}

// FindAttendancesRequestMultiError is an error wrapping multiple validation
// errors returned by FindAttendancesRequest.ValidateAll() if the designated
// constraints aren't met.
type FindAttendancesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindAttendancesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindAttendancesRequestMultiError) AllErrors() []error { return m }

// FindAttendancesRequestValidationError is the validation error returned by
// FindAttendancesRequest.Validate if the designated constraints aren't met.
type FindAttendancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindAttendancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindAttendancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindAttendancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindAttendancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindAttendancesRequestValidationError) ErrorName() string {
	return "FindAttendancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindAttendancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindAttendancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindAttendancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindAttendancesRequestValidationError{}

// Validate checks the field values on FindAttendancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindAttendancesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindAttendancesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindAttendancesResponseMultiError, or nil if none found.
func (m *FindAttendancesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindAttendancesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalCount

	// no validation rules for TotalPages

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for HasMore

	for idx, item := range m.GetAttendances() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindAttendancesResponseValidationError{
						field:  fmt.Sprintf("Attendances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindAttendancesResponseValidationError{
						field:  fmt.Sprintf("Attendances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindAttendancesResponseValidationError{
					field:  fmt.Sprintf("Attendances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FindAttendancesResponseMultiError(errors)
	}

	return nil
}

// FindAttendancesResponseMultiError is an error wrapping multiple validation
// errors returned by FindAttendancesResponse.ValidateAll() if the designated
// constraints aren't met.
type FindAttendancesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindAttendancesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindAttendancesResponseMultiError) AllErrors() []error { return m }

// FindAttendancesResponseValidationError is the validation error returned by
// FindAttendancesResponse.Validate if the designated constraints aren't met.
type FindAttendancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindAttendancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindAttendancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindAttendancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindAttendancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindAttendancesResponseValidationError) ErrorName() string {
	return "FindAttendancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindAttendancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindAttendancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindAttendancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindAttendancesResponseValidationError{}

// Validate checks the field values on FindAttendanceByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindAttendanceByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindAttendanceByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindAttendanceByIdRequestMultiError, or nil if none found.
func (m *FindAttendanceByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindAttendanceByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := FindAttendanceByIdRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FindAttendanceByIdRequestMultiError(errors)
	}

	return nil
}

// FindAttendanceByIdRequestMultiError is an error wrapping multiple validation
// errors returned by FindAttendanceByIdRequest.ValidateAll() if the
// designated constraints aren't met.
type FindAttendanceByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindAttendanceByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindAttendanceByIdRequestMultiError) AllErrors() []error { return m }

// FindAttendanceByIdRequestValidationError is the validation error returned by
// FindAttendanceByIdRequest.Validate if the designated constraints aren't met.
type FindAttendanceByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindAttendanceByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindAttendanceByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindAttendanceByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindAttendanceByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindAttendanceByIdRequestValidationError) ErrorName() string {
	return "FindAttendanceByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindAttendanceByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindAttendanceByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindAttendanceByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindAttendanceByIdRequestValidationError{}

// Validate checks the field values on FindAttendanceByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindAttendanceByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindAttendanceByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindAttendanceByIdResponseMultiError, or nil if none found.
func (m *FindAttendanceByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindAttendanceByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAttendance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindAttendanceByIdResponseValidationError{
					field:  "Attendance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindAttendanceByIdResponseValidationError{
					field:  "Attendance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttendance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindAttendanceByIdResponseValidationError{
				field:  "Attendance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindAttendanceByIdResponseMultiError(errors)
	}

	return nil
}

// FindAttendanceByIdResponseMultiError is an error wrapping multiple
// validation errors returned by FindAttendanceByIdResponse.ValidateAll() if
// the designated constraints aren't met.
type FindAttendanceByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindAttendanceByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindAttendanceByIdResponseMultiError) AllErrors() []error { return m }

// FindAttendanceByIdResponseValidationError is the validation error returned
// by FindAttendanceByIdResponse.Validate if the designated constraints aren't met.
type FindAttendanceByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindAttendanceByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindAttendanceByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindAttendanceByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindAttendanceByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindAttendanceByIdResponseValidationError) ErrorName() string {
	return "FindAttendanceByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindAttendanceByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindAttendanceByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindAttendanceByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindAttendanceByIdResponseValidationError{}
