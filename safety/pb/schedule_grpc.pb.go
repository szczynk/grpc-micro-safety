// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: schedule.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScheduleServiceClient is the client API for ScheduleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScheduleServiceClient interface {
	CreateSchedule(ctx context.Context, in *CreateScheduleRequest, opts ...grpc.CallOption) (*CreateScheduleResponse, error)
	UpdateScheduleById(ctx context.Context, in *UpdateScheduleByIdRequest, opts ...grpc.CallOption) (*UpdateScheduleByIdResponse, error)
	DeleteScheduleById(ctx context.Context, in *DeleteScheduleByIdRequest, opts ...grpc.CallOption) (*DeleteScheduleByIdResponse, error)
	FindSchedules(ctx context.Context, in *FindSchedulesRequest, opts ...grpc.CallOption) (*FindSchedulesResponse, error)
	FindScheduleById(ctx context.Context, in *FindScheduleByIdRequest, opts ...grpc.CallOption) (*FindScheduleByIdResponse, error)
}

type scheduleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScheduleServiceClient(cc grpc.ClientConnInterface) ScheduleServiceClient {
	return &scheduleServiceClient{cc}
}

func (c *scheduleServiceClient) CreateSchedule(ctx context.Context, in *CreateScheduleRequest, opts ...grpc.CallOption) (*CreateScheduleResponse, error) {
	out := new(CreateScheduleResponse)
	err := c.cc.Invoke(ctx, "/pb.ScheduleService/CreateSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) UpdateScheduleById(ctx context.Context, in *UpdateScheduleByIdRequest, opts ...grpc.CallOption) (*UpdateScheduleByIdResponse, error) {
	out := new(UpdateScheduleByIdResponse)
	err := c.cc.Invoke(ctx, "/pb.ScheduleService/UpdateScheduleById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) DeleteScheduleById(ctx context.Context, in *DeleteScheduleByIdRequest, opts ...grpc.CallOption) (*DeleteScheduleByIdResponse, error) {
	out := new(DeleteScheduleByIdResponse)
	err := c.cc.Invoke(ctx, "/pb.ScheduleService/DeleteScheduleById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) FindSchedules(ctx context.Context, in *FindSchedulesRequest, opts ...grpc.CallOption) (*FindSchedulesResponse, error) {
	out := new(FindSchedulesResponse)
	err := c.cc.Invoke(ctx, "/pb.ScheduleService/FindSchedules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) FindScheduleById(ctx context.Context, in *FindScheduleByIdRequest, opts ...grpc.CallOption) (*FindScheduleByIdResponse, error) {
	out := new(FindScheduleByIdResponse)
	err := c.cc.Invoke(ctx, "/pb.ScheduleService/FindScheduleById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScheduleServiceServer is the server API for ScheduleService service.
// All implementations must embed UnimplementedScheduleServiceServer
// for forward compatibility
type ScheduleServiceServer interface {
	CreateSchedule(context.Context, *CreateScheduleRequest) (*CreateScheduleResponse, error)
	UpdateScheduleById(context.Context, *UpdateScheduleByIdRequest) (*UpdateScheduleByIdResponse, error)
	DeleteScheduleById(context.Context, *DeleteScheduleByIdRequest) (*DeleteScheduleByIdResponse, error)
	FindSchedules(context.Context, *FindSchedulesRequest) (*FindSchedulesResponse, error)
	FindScheduleById(context.Context, *FindScheduleByIdRequest) (*FindScheduleByIdResponse, error)
	mustEmbedUnimplementedScheduleServiceServer()
}

// UnimplementedScheduleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScheduleServiceServer struct {
}

func (UnimplementedScheduleServiceServer) CreateSchedule(context.Context, *CreateScheduleRequest) (*CreateScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchedule not implemented")
}
func (UnimplementedScheduleServiceServer) UpdateScheduleById(context.Context, *UpdateScheduleByIdRequest) (*UpdateScheduleByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScheduleById not implemented")
}
func (UnimplementedScheduleServiceServer) DeleteScheduleById(context.Context, *DeleteScheduleByIdRequest) (*DeleteScheduleByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScheduleById not implemented")
}
func (UnimplementedScheduleServiceServer) FindSchedules(context.Context, *FindSchedulesRequest) (*FindSchedulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSchedules not implemented")
}
func (UnimplementedScheduleServiceServer) FindScheduleById(context.Context, *FindScheduleByIdRequest) (*FindScheduleByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindScheduleById not implemented")
}
func (UnimplementedScheduleServiceServer) mustEmbedUnimplementedScheduleServiceServer() {}

// UnsafeScheduleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScheduleServiceServer will
// result in compilation errors.
type UnsafeScheduleServiceServer interface {
	mustEmbedUnimplementedScheduleServiceServer()
}

func RegisterScheduleServiceServer(s grpc.ServiceRegistrar, srv ScheduleServiceServer) {
	s.RegisterService(&ScheduleService_ServiceDesc, srv)
}

func _ScheduleService_CreateSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).CreateSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ScheduleService/CreateSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).CreateSchedule(ctx, req.(*CreateScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_UpdateScheduleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScheduleByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).UpdateScheduleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ScheduleService/UpdateScheduleById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).UpdateScheduleById(ctx, req.(*UpdateScheduleByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_DeleteScheduleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScheduleByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).DeleteScheduleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ScheduleService/DeleteScheduleById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).DeleteScheduleById(ctx, req.(*DeleteScheduleByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_FindSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSchedulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).FindSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ScheduleService/FindSchedules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).FindSchedules(ctx, req.(*FindSchedulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_FindScheduleById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindScheduleByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).FindScheduleById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ScheduleService/FindScheduleById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).FindScheduleById(ctx, req.(*FindScheduleByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScheduleService_ServiceDesc is the grpc.ServiceDesc for ScheduleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScheduleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ScheduleService",
	HandlerType: (*ScheduleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSchedule",
			Handler:    _ScheduleService_CreateSchedule_Handler,
		},
		{
			MethodName: "UpdateScheduleById",
			Handler:    _ScheduleService_UpdateScheduleById_Handler,
		},
		{
			MethodName: "DeleteScheduleById",
			Handler:    _ScheduleService_DeleteScheduleById_Handler,
		},
		{
			MethodName: "FindSchedules",
			Handler:    _ScheduleService_FindSchedules_Handler,
		},
		{
			MethodName: "FindScheduleById",
			Handler:    _ScheduleService_FindScheduleById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schedule.proto",
}
