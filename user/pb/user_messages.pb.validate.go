// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user_messages.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _user_messages_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Role

	// no validation rules for Avatar

	// no validation rules for Verified

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on UpdateMeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateMeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMeRequestMultiError, or nil if none found.
func (m *UpdateMeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Username != nil {

		if utf8.RuneCountInString(m.GetUsername()) < 5 {
			err := UpdateMeRequestValidationError{
				field:  "Username",
				reason: "value length must be at least 5 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Avatar != nil {
		// no validation rules for Avatar
	}

	if len(errors) > 0 {
		return UpdateMeRequestMultiError(errors)
	}

	return nil
}

// UpdateMeRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateMeRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateMeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMeRequestMultiError) AllErrors() []error { return m }

// UpdateMeRequestValidationError is the validation error returned by
// UpdateMeRequest.Validate if the designated constraints aren't met.
type UpdateMeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMeRequestValidationError) ErrorName() string { return "UpdateMeRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateMeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMeRequestValidationError{}

// Validate checks the field values on UpdateMeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateMeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMeResponseMultiError, or nil if none found.
func (m *UpdateMeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMeResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMeResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMeResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateMeResponseMultiError(errors)
	}

	return nil
}

// UpdateMeResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateMeResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateMeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMeResponseMultiError) AllErrors() []error { return m }

// UpdateMeResponseValidationError is the validation error returned by
// UpdateMeResponse.Validate if the designated constraints aren't met.
type UpdateMeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMeResponseValidationError) ErrorName() string { return "UpdateMeResponseValidationError" }

// Error satisfies the builtin error interface
func (e UpdateMeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMeResponseValidationError{}

// Validate checks the field values on ChangeEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeEmailRequestMultiError, or nil if none found.
func (m *ChangeEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = ChangeEmailRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChangeEmailRequestMultiError(errors)
	}

	return nil
}

func (m *ChangeEmailRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *ChangeEmailRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// ChangeEmailRequestMultiError is an error wrapping multiple validation errors
// returned by ChangeEmailRequest.ValidateAll() if the designated constraints
// aren't met.
type ChangeEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeEmailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeEmailRequestMultiError) AllErrors() []error { return m }

// ChangeEmailRequestValidationError is the validation error returned by
// ChangeEmailRequest.Validate if the designated constraints aren't met.
type ChangeEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeEmailRequestValidationError) ErrorName() string {
	return "ChangeEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeEmailRequestValidationError{}

// Validate checks the field values on ChangeEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeEmailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeEmailResponseMultiError, or nil if none found.
func (m *ChangeEmailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeEmailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeEmailResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeEmailResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeEmailResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Message

	if len(errors) > 0 {
		return ChangeEmailResponseMultiError(errors)
	}

	return nil
}

// ChangeEmailResponseMultiError is an error wrapping multiple validation
// errors returned by ChangeEmailResponse.ValidateAll() if the designated
// constraints aren't met.
type ChangeEmailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeEmailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeEmailResponseMultiError) AllErrors() []error { return m }

// ChangeEmailResponseValidationError is the validation error returned by
// ChangeEmailResponse.Validate if the designated constraints aren't met.
type ChangeEmailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeEmailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeEmailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeEmailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeEmailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeEmailResponseValidationError) ErrorName() string {
	return "ChangeEmailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeEmailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeEmailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeEmailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeEmailResponseValidationError{}

// Validate checks the field values on RefreshAccessTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshAccessTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshAccessTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshAccessTokenRequestMultiError, or nil if none found.
func (m *RefreshAccessTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshAccessTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return RefreshAccessTokenRequestMultiError(errors)
	}

	return nil
}

// RefreshAccessTokenRequestMultiError is an error wrapping multiple validation
// errors returned by RefreshAccessTokenRequest.ValidateAll() if the
// designated constraints aren't met.
type RefreshAccessTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshAccessTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshAccessTokenRequestMultiError) AllErrors() []error { return m }

// RefreshAccessTokenRequestValidationError is the validation error returned by
// RefreshAccessTokenRequest.Validate if the designated constraints aren't met.
type RefreshAccessTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshAccessTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshAccessTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshAccessTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshAccessTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshAccessTokenRequestValidationError) ErrorName() string {
	return "RefreshAccessTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshAccessTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshAccessTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshAccessTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshAccessTokenRequestValidationError{}

// Validate checks the field values on RefreshAccessTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshAccessTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshAccessTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshAccessTokenResponseMultiError, or nil if none found.
func (m *RefreshAccessTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshAccessTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if all {
		switch v := interface{}(m.GetAccessTokenExpiresAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RefreshAccessTokenResponseValidationError{
					field:  "AccessTokenExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RefreshAccessTokenResponseValidationError{
					field:  "AccessTokenExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccessTokenExpiresAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RefreshAccessTokenResponseValidationError{
				field:  "AccessTokenExpiresAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RefreshAccessTokenResponseMultiError(errors)
	}

	return nil
}

// RefreshAccessTokenResponseMultiError is an error wrapping multiple
// validation errors returned by RefreshAccessTokenResponse.ValidateAll() if
// the designated constraints aren't met.
type RefreshAccessTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshAccessTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshAccessTokenResponseMultiError) AllErrors() []error { return m }

// RefreshAccessTokenResponseValidationError is the validation error returned
// by RefreshAccessTokenResponse.Validate if the designated constraints aren't met.
type RefreshAccessTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshAccessTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshAccessTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshAccessTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshAccessTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshAccessTokenResponseValidationError) ErrorName() string {
	return "RefreshAccessTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshAccessTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshAccessTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshAccessTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshAccessTokenResponseValidationError{}

// Validate checks the field values on LogoutRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutRequestMultiError, or
// nil if none found.
func (m *LogoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return LogoutRequestMultiError(errors)
	}

	return nil
}

// LogoutRequestMultiError is an error wrapping multiple validation errors
// returned by LogoutRequest.ValidateAll() if the designated constraints
// aren't met.
type LogoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutRequestMultiError) AllErrors() []error { return m }

// LogoutRequestValidationError is the validation error returned by
// LogoutRequest.Validate if the designated constraints aren't met.
type LogoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutRequestValidationError) ErrorName() string { return "LogoutRequestValidationError" }

// Error satisfies the builtin error interface
func (e LogoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutRequestValidationError{}

// Validate checks the field values on LogoutResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutResponseMultiError,
// or nil if none found.
func (m *LogoutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogoutResponseMultiError(errors)
	}

	return nil
}

// LogoutResponseMultiError is an error wrapping multiple validation errors
// returned by LogoutResponse.ValidateAll() if the designated constraints
// aren't met.
type LogoutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutResponseMultiError) AllErrors() []error { return m }

// LogoutResponseValidationError is the validation error returned by
// LogoutResponse.Validate if the designated constraints aren't met.
type LogoutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutResponseValidationError) ErrorName() string { return "LogoutResponseValidationError" }

// Error satisfies the builtin error interface
func (e LogoutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutResponseValidationError{}

// Validate checks the field values on GetMeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetMeRequestMultiError, or
// nil if none found.
func (m *GetMeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetMeRequestMultiError(errors)
	}

	return nil
}

// GetMeRequestMultiError is an error wrapping multiple validation errors
// returned by GetMeRequest.ValidateAll() if the designated constraints aren't met.
type GetMeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMeRequestMultiError) AllErrors() []error { return m }

// GetMeRequestValidationError is the validation error returned by
// GetMeRequest.Validate if the designated constraints aren't met.
type GetMeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMeRequestValidationError) ErrorName() string { return "GetMeRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetMeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMeRequestValidationError{}

// Validate checks the field values on GetMeResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetMeResponseMultiError, or
// nil if none found.
func (m *GetMeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMeResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMeResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMeResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMeResponseMultiError(errors)
	}

	return nil
}

// GetMeResponseMultiError is an error wrapping multiple validation errors
// returned by GetMeResponse.ValidateAll() if the designated constraints
// aren't met.
type GetMeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMeResponseMultiError) AllErrors() []error { return m }

// GetMeResponseValidationError is the validation error returned by
// GetMeResponse.Validate if the designated constraints aren't met.
type GetMeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMeResponseValidationError) ErrorName() string { return "GetMeResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetMeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMeResponseValidationError{}

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRequestMultiError, or nil if none found.
func (m *CreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 5 {
		err := CreateUserRequestValidationError{
			field:  "Username",
			reason: "value length must be at least 5 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = CreateUserRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 8 {
		err := CreateUserRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 8 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Role

	// no validation rules for Avatar

	// no validation rules for Verified

	if len(errors) > 0 {
		return CreateUserRequestMultiError(errors)
	}

	return nil
}

func (m *CreateUserRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CreateUserRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CreateUserRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRequestMultiError) AllErrors() []error { return m }

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserResponseMultiError, or nil if none found.
func (m *CreateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateUserResponseMultiError(errors)
	}

	return nil
}

// CreateUserResponseMultiError is an error wrapping multiple validation errors
// returned by CreateUserResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserResponseMultiError) AllErrors() []error { return m }

// CreateUserResponseValidationError is the validation error returned by
// CreateUserResponse.Validate if the designated constraints aren't met.
type CreateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserResponseValidationError) ErrorName() string {
	return "CreateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserResponseValidationError{}

// Validate checks the field values on UpdateUserByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserByIdRequestMultiError, or nil if none found.
func (m *UpdateUserByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = UpdateUserByIdRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsername()) < 5 {
		err := UpdateUserByIdRequestValidationError{
			field:  "Username",
			reason: "value length must be at least 5 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = UpdateUserByIdRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 8 {
		err := UpdateUserByIdRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 8 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Role

	// no validation rules for Avatar

	// no validation rules for Verified

	if len(errors) > 0 {
		return UpdateUserByIdRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateUserByIdRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UpdateUserByIdRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

func (m *UpdateUserByIdRequest) _validateUuid(uuid string) error {
	if matched := _user_messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateUserByIdRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateUserByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserByIdRequestMultiError) AllErrors() []error { return m }

// UpdateUserByIdRequestValidationError is the validation error returned by
// UpdateUserByIdRequest.Validate if the designated constraints aren't met.
type UpdateUserByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserByIdRequestValidationError) ErrorName() string {
	return "UpdateUserByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserByIdRequestValidationError{}

// Validate checks the field values on UpdateUserByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserByIdResponseMultiError, or nil if none found.
func (m *UpdateUserByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserByIdResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserByIdResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserByIdResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserByIdResponseMultiError(errors)
	}

	return nil
}

// UpdateUserByIdResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateUserByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserByIdResponseMultiError) AllErrors() []error { return m }

// UpdateUserByIdResponseValidationError is the validation error returned by
// UpdateUserByIdResponse.Validate if the designated constraints aren't met.
type UpdateUserByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserByIdResponseValidationError) ErrorName() string {
	return "UpdateUserByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserByIdResponseValidationError{}

// Validate checks the field values on DeleteUserByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserByIdRequestMultiError, or nil if none found.
func (m *DeleteUserByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = DeleteUserByIdRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteUserByIdRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteUserByIdRequest) _validateUuid(uuid string) error {
	if matched := _user_messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteUserByIdRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteUserByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserByIdRequestMultiError) AllErrors() []error { return m }

// DeleteUserByIdRequestValidationError is the validation error returned by
// DeleteUserByIdRequest.Validate if the designated constraints aren't met.
type DeleteUserByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserByIdRequestValidationError) ErrorName() string {
	return "DeleteUserByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserByIdRequestValidationError{}

// Validate checks the field values on DeleteUserByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserByIdResponseMultiError, or nil if none found.
func (m *DeleteUserByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteUserByIdResponseMultiError(errors)
	}

	return nil
}

// DeleteUserByIdResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteUserByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserByIdResponseMultiError) AllErrors() []error { return m }

// DeleteUserByIdResponseValidationError is the validation error returned by
// DeleteUserByIdResponse.Validate if the designated constraints aren't met.
type DeleteUserByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserByIdResponseValidationError) ErrorName() string {
	return "DeleteUserByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserByIdResponseValidationError{}

// Validate checks the field values on FindUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FindUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindUsersRequestMultiError, or nil if none found.
func (m *FindUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Email

	if utf8.RuneCountInString(m.GetRole()) < 8 {
		err := FindUsersRequestValidationError{
			field:  "Role",
			reason: "value length must be at least 8 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Verified

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for Sort

	if len(errors) > 0 {
		return FindUsersRequestMultiError(errors)
	}

	return nil
}

// FindUsersRequestMultiError is an error wrapping multiple validation errors
// returned by FindUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type FindUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindUsersRequestMultiError) AllErrors() []error { return m }

// FindUsersRequestValidationError is the validation error returned by
// FindUsersRequest.Validate if the designated constraints aren't met.
type FindUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindUsersRequestValidationError) ErrorName() string { return "FindUsersRequestValidationError" }

// Error satisfies the builtin error interface
func (e FindUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindUsersRequestValidationError{}

// Validate checks the field values on FindUsersResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FindUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindUsersResponseMultiError, or nil if none found.
func (m *FindUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalCount

	// no validation rules for TotalPages

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for HasMore

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FindUsersResponseMultiError(errors)
	}

	return nil
}

// FindUsersResponseMultiError is an error wrapping multiple validation errors
// returned by FindUsersResponse.ValidateAll() if the designated constraints
// aren't met.
type FindUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindUsersResponseMultiError) AllErrors() []error { return m }

// FindUsersResponseValidationError is the validation error returned by
// FindUsersResponse.Validate if the designated constraints aren't met.
type FindUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindUsersResponseValidationError) ErrorName() string {
	return "FindUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindUsersResponseValidationError{}

// Validate checks the field values on FindUserByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindUserByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindUserByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindUserByIdRequestMultiError, or nil if none found.
func (m *FindUserByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindUserByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = FindUserByIdRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FindUserByIdRequestMultiError(errors)
	}

	return nil
}

func (m *FindUserByIdRequest) _validateUuid(uuid string) error {
	if matched := _user_messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// FindUserByIdRequestMultiError is an error wrapping multiple validation
// errors returned by FindUserByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type FindUserByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindUserByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindUserByIdRequestMultiError) AllErrors() []error { return m }

// FindUserByIdRequestValidationError is the validation error returned by
// FindUserByIdRequest.Validate if the designated constraints aren't met.
type FindUserByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindUserByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindUserByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindUserByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindUserByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindUserByIdRequestValidationError) ErrorName() string {
	return "FindUserByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindUserByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindUserByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindUserByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindUserByIdRequestValidationError{}

// Validate checks the field values on FindUserByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindUserByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindUserByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindUserByIdResponseMultiError, or nil if none found.
func (m *FindUserByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindUserByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindUserByIdResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindUserByIdResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindUserByIdResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindUserByIdResponseMultiError(errors)
	}

	return nil
}

// FindUserByIdResponseMultiError is an error wrapping multiple validation
// errors returned by FindUserByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type FindUserByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindUserByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindUserByIdResponseMultiError) AllErrors() []error { return m }

// FindUserByIdResponseValidationError is the validation error returned by
// FindUserByIdResponse.Validate if the designated constraints aren't met.
type FindUserByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindUserByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindUserByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindUserByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindUserByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindUserByIdResponseValidationError) ErrorName() string {
	return "FindUserByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindUserByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindUserByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindUserByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindUserByIdResponseValidationError{}
