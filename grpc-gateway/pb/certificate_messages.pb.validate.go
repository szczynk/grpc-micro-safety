// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: certificate_messages.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _certificate_messages_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Certificate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Certificate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Certificate with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CertificateMultiError, or
// nil if none found.
func (m *Certificate) ValidateAll() error {
	return m.validate(true)
}

func (m *Certificate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for Dose

	// no validation rules for ImageUrl

	// no validation rules for Description

	// no validation rules for AdminUsername

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetStatusAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CertificateValidationError{
					field:  "StatusAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CertificateValidationError{
					field:  "StatusAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatusAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CertificateValidationError{
				field:  "StatusAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StatusInfo

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CertificateValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CertificateValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CertificateValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CertificateValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CertificateValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CertificateValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CertificateMultiError(errors)
	}

	return nil
}

// CertificateMultiError is an error wrapping multiple validation errors
// returned by Certificate.ValidateAll() if the designated constraints aren't met.
type CertificateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CertificateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CertificateMultiError) AllErrors() []error { return m }

// CertificateValidationError is the validation error returned by
// Certificate.Validate if the designated constraints aren't met.
type CertificateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CertificateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CertificateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CertificateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CertificateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CertificateValidationError) ErrorName() string { return "CertificateValidationError" }

// Error satisfies the builtin error interface
func (e CertificateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCertificate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CertificateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CertificateValidationError{}

// Validate checks the field values on CertificateDetail with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CertificateDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CertificateDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CertificateDetailMultiError, or nil if none found.
func (m *CertificateDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *CertificateDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for UserUsername

	// no validation rules for UserAvatar

	// no validation rules for Dose

	// no validation rules for ImageUrl

	// no validation rules for Description

	// no validation rules for AdminUsername

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetStatusAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CertificateDetailValidationError{
					field:  "StatusAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CertificateDetailValidationError{
					field:  "StatusAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatusAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CertificateDetailValidationError{
				field:  "StatusAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StatusInfo

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CertificateDetailValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CertificateDetailValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CertificateDetailValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CertificateDetailValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CertificateDetailValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CertificateDetailValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CertificateDetailMultiError(errors)
	}

	return nil
}

// CertificateDetailMultiError is an error wrapping multiple validation errors
// returned by CertificateDetail.ValidateAll() if the designated constraints
// aren't met.
type CertificateDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CertificateDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CertificateDetailMultiError) AllErrors() []error { return m }

// CertificateDetailValidationError is the validation error returned by
// CertificateDetail.Validate if the designated constraints aren't met.
type CertificateDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CertificateDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CertificateDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CertificateDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CertificateDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CertificateDetailValidationError) ErrorName() string {
	return "CertificateDetailValidationError"
}

// Error satisfies the builtin error interface
func (e CertificateDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCertificateDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CertificateDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CertificateDetailValidationError{}

// Validate checks the field values on CreateCertificateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCertificateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCertificateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCertificateRequestMultiError, or nil if none found.
func (m *CreateCertificateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCertificateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = CreateCertificateRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetDose(); val < 1 || val > 3 {
		err := CreateCertificateRequestValidationError{
			field:  "Dose",
			reason: "value must be inside range [1, 3]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if utf8.RuneCountInString(m.GetImageUrl()) < 8 {
		err := CreateCertificateRequestValidationError{
			field:  "ImageUrl",
			reason: "value length must be at least 8 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateCertificateRequestMultiError(errors)
	}

	return nil
}

func (m *CreateCertificateRequest) _validateUuid(uuid string) error {
	if matched := _certificate_messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateCertificateRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCertificateRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCertificateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCertificateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCertificateRequestMultiError) AllErrors() []error { return m }

// CreateCertificateRequestValidationError is the validation error returned by
// CreateCertificateRequest.Validate if the designated constraints aren't met.
type CreateCertificateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCertificateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCertificateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCertificateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCertificateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCertificateRequestValidationError) ErrorName() string {
	return "CreateCertificateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCertificateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCertificateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCertificateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCertificateRequestValidationError{}

// Validate checks the field values on CreateCertificateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCertificateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCertificateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCertificateResponseMultiError, or nil if none found.
func (m *CreateCertificateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCertificateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCertificate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCertificateResponseValidationError{
					field:  "Certificate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCertificateResponseValidationError{
					field:  "Certificate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCertificate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCertificateResponseValidationError{
				field:  "Certificate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCertificateResponseMultiError(errors)
	}

	return nil
}

// CreateCertificateResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCertificateResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateCertificateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCertificateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCertificateResponseMultiError) AllErrors() []error { return m }

// CreateCertificateResponseValidationError is the validation error returned by
// CreateCertificateResponse.Validate if the designated constraints aren't met.
type CreateCertificateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCertificateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCertificateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCertificateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCertificateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCertificateResponseValidationError) ErrorName() string {
	return "CreateCertificateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCertificateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCertificateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCertificateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCertificateResponseValidationError{}

// Validate checks the field values on UpdateCertificateByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCertificateByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCertificateByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCertificateByIdRequestMultiError, or nil if none found.
func (m *UpdateCertificateByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCertificateByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateCertificateByIdRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	// no validation rules for ImageUrl

	if utf8.RuneCountInString(m.GetAdminUsername()) < 3 {
		err := UpdateCertificateByIdRequestValidationError{
			field:  "AdminUsername",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _UpdateCertificateByIdRequest_Status_InLookup[m.GetStatus()]; !ok {
		err := UpdateCertificateByIdRequestValidationError{
			field:  "Status",
			reason: "value must be in list [approved pending rejected]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StatusInfo

	if len(errors) > 0 {
		return UpdateCertificateByIdRequestMultiError(errors)
	}

	return nil
}

// UpdateCertificateByIdRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateCertificateByIdRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateCertificateByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCertificateByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCertificateByIdRequestMultiError) AllErrors() []error { return m }

// UpdateCertificateByIdRequestValidationError is the validation error returned
// by UpdateCertificateByIdRequest.Validate if the designated constraints
// aren't met.
type UpdateCertificateByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCertificateByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCertificateByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCertificateByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCertificateByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCertificateByIdRequestValidationError) ErrorName() string {
	return "UpdateCertificateByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCertificateByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCertificateByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCertificateByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCertificateByIdRequestValidationError{}

var _UpdateCertificateByIdRequest_Status_InLookup = map[string]struct{}{
	"approved": {},
	"pending":  {},
	"rejected": {},
}

// Validate checks the field values on UpdateCertificateByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCertificateByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCertificateByIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateCertificateByIdResponseMultiError, or nil if none found.
func (m *UpdateCertificateByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCertificateByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCertificate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCertificateByIdResponseValidationError{
					field:  "Certificate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCertificateByIdResponseValidationError{
					field:  "Certificate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCertificate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCertificateByIdResponseValidationError{
				field:  "Certificate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCertificateByIdResponseMultiError(errors)
	}

	return nil
}

// UpdateCertificateByIdResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateCertificateByIdResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateCertificateByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCertificateByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCertificateByIdResponseMultiError) AllErrors() []error { return m }

// UpdateCertificateByIdResponseValidationError is the validation error
// returned by UpdateCertificateByIdResponse.Validate if the designated
// constraints aren't met.
type UpdateCertificateByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCertificateByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCertificateByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCertificateByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCertificateByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCertificateByIdResponseValidationError) ErrorName() string {
	return "UpdateCertificateByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCertificateByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCertificateByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCertificateByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCertificateByIdResponseValidationError{}

// Validate checks the field values on DeleteCertificateByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCertificateByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCertificateByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCertificateByIdRequestMultiError, or nil if none found.
func (m *DeleteCertificateByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCertificateByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteCertificateByIdRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteCertificateByIdRequestMultiError(errors)
	}

	return nil
}

// DeleteCertificateByIdRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteCertificateByIdRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteCertificateByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCertificateByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCertificateByIdRequestMultiError) AllErrors() []error { return m }

// DeleteCertificateByIdRequestValidationError is the validation error returned
// by DeleteCertificateByIdRequest.Validate if the designated constraints
// aren't met.
type DeleteCertificateByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCertificateByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCertificateByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCertificateByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCertificateByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCertificateByIdRequestValidationError) ErrorName() string {
	return "DeleteCertificateByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCertificateByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCertificateByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCertificateByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCertificateByIdRequestValidationError{}

// Validate checks the field values on DeleteCertificateByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCertificateByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCertificateByIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteCertificateByIdResponseMultiError, or nil if none found.
func (m *DeleteCertificateByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCertificateByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteCertificateByIdResponseMultiError(errors)
	}

	return nil
}

// DeleteCertificateByIdResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteCertificateByIdResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteCertificateByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCertificateByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCertificateByIdResponseMultiError) AllErrors() []error { return m }

// DeleteCertificateByIdResponseValidationError is the validation error
// returned by DeleteCertificateByIdResponse.Validate if the designated
// constraints aren't met.
type DeleteCertificateByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCertificateByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCertificateByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCertificateByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCertificateByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCertificateByIdResponseValidationError) ErrorName() string {
	return "DeleteCertificateByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCertificateByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCertificateByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCertificateByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCertificateByIdResponseValidationError{}

// Validate checks the field values on FindCertificatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindCertificatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindCertificatesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindCertificatesRequestMultiError, or nil if none found.
func (m *FindCertificatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindCertificatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Status

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for Sort

	if len(errors) > 0 {
		return FindCertificatesRequestMultiError(errors)
	}

	return nil
}

// FindCertificatesRequestMultiError is an error wrapping multiple validation
// errors returned by FindCertificatesRequest.ValidateAll() if the designated
// constraints aren't met.
type FindCertificatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindCertificatesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindCertificatesRequestMultiError) AllErrors() []error { return m }

// FindCertificatesRequestValidationError is the validation error returned by
// FindCertificatesRequest.Validate if the designated constraints aren't met.
type FindCertificatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindCertificatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindCertificatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindCertificatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindCertificatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindCertificatesRequestValidationError) ErrorName() string {
	return "FindCertificatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindCertificatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindCertificatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindCertificatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindCertificatesRequestValidationError{}

// Validate checks the field values on FindCertificatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindCertificatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindCertificatesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindCertificatesResponseMultiError, or nil if none found.
func (m *FindCertificatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindCertificatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalCount

	// no validation rules for TotalPages

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for HasMore

	for idx, item := range m.GetCertificates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindCertificatesResponseValidationError{
						field:  fmt.Sprintf("Certificates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindCertificatesResponseValidationError{
						field:  fmt.Sprintf("Certificates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindCertificatesResponseValidationError{
					field:  fmt.Sprintf("Certificates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FindCertificatesResponseMultiError(errors)
	}

	return nil
}

// FindCertificatesResponseMultiError is an error wrapping multiple validation
// errors returned by FindCertificatesResponse.ValidateAll() if the designated
// constraints aren't met.
type FindCertificatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindCertificatesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindCertificatesResponseMultiError) AllErrors() []error { return m }

// FindCertificatesResponseValidationError is the validation error returned by
// FindCertificatesResponse.Validate if the designated constraints aren't met.
type FindCertificatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindCertificatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindCertificatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindCertificatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindCertificatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindCertificatesResponseValidationError) ErrorName() string {
	return "FindCertificatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindCertificatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindCertificatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindCertificatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindCertificatesResponseValidationError{}

// Validate checks the field values on FindCertificateByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindCertificateByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindCertificateByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindCertificateByIdRequestMultiError, or nil if none found.
func (m *FindCertificateByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindCertificateByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := FindCertificateByIdRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FindCertificateByIdRequestMultiError(errors)
	}

	return nil
}

// FindCertificateByIdRequestMultiError is an error wrapping multiple
// validation errors returned by FindCertificateByIdRequest.ValidateAll() if
// the designated constraints aren't met.
type FindCertificateByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindCertificateByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindCertificateByIdRequestMultiError) AllErrors() []error { return m }

// FindCertificateByIdRequestValidationError is the validation error returned
// by FindCertificateByIdRequest.Validate if the designated constraints aren't met.
type FindCertificateByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindCertificateByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindCertificateByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindCertificateByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindCertificateByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindCertificateByIdRequestValidationError) ErrorName() string {
	return "FindCertificateByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindCertificateByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindCertificateByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindCertificateByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindCertificateByIdRequestValidationError{}

// Validate checks the field values on FindCertificateByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindCertificateByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindCertificateByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindCertificateByIdResponseMultiError, or nil if none found.
func (m *FindCertificateByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindCertificateByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCertificate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindCertificateByIdResponseValidationError{
					field:  "Certificate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindCertificateByIdResponseValidationError{
					field:  "Certificate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCertificate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindCertificateByIdResponseValidationError{
				field:  "Certificate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindCertificateByIdResponseMultiError(errors)
	}

	return nil
}

// FindCertificateByIdResponseMultiError is an error wrapping multiple
// validation errors returned by FindCertificateByIdResponse.ValidateAll() if
// the designated constraints aren't met.
type FindCertificateByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindCertificateByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindCertificateByIdResponseMultiError) AllErrors() []error { return m }

// FindCertificateByIdResponseValidationError is the validation error returned
// by FindCertificateByIdResponse.Validate if the designated constraints
// aren't met.
type FindCertificateByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindCertificateByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindCertificateByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindCertificateByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindCertificateByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindCertificateByIdResponseValidationError) ErrorName() string {
	return "FindCertificateByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindCertificateByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindCertificateByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindCertificateByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindCertificateByIdResponseValidationError{}
