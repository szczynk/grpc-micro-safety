// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: office_messages.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Office with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Office) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Office with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OfficeMultiError, or nil if none found.
func (m *Office) ValidateAll() error {
	return m.validate(true)
}

func (m *Office) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Detail

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OfficeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OfficeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OfficeValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OfficeValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OfficeValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OfficeValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OfficeMultiError(errors)
	}

	return nil
}

// OfficeMultiError is an error wrapping multiple validation errors returned by
// Office.ValidateAll() if the designated constraints aren't met.
type OfficeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OfficeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OfficeMultiError) AllErrors() []error { return m }

// OfficeValidationError is the validation error returned by Office.Validate if
// the designated constraints aren't met.
type OfficeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OfficeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OfficeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OfficeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OfficeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OfficeValidationError) ErrorName() string { return "OfficeValidationError" }

// Error satisfies the builtin error interface
func (e OfficeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOffice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OfficeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OfficeValidationError{}

// Validate checks the field values on CreateOfficeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOfficeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOfficeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOfficeRequestMultiError, or nil if none found.
func (m *CreateOfficeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOfficeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 3 {
		err := CreateOfficeRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDetail()) < 3 {
		err := CreateOfficeRequestValidationError{
			field:  "Detail",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateOfficeRequestMultiError(errors)
	}

	return nil
}

// CreateOfficeRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOfficeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOfficeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOfficeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOfficeRequestMultiError) AllErrors() []error { return m }

// CreateOfficeRequestValidationError is the validation error returned by
// CreateOfficeRequest.Validate if the designated constraints aren't met.
type CreateOfficeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOfficeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOfficeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOfficeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOfficeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOfficeRequestValidationError) ErrorName() string {
	return "CreateOfficeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOfficeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOfficeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOfficeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOfficeRequestValidationError{}

// Validate checks the field values on CreateOfficeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOfficeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOfficeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOfficeResponseMultiError, or nil if none found.
func (m *CreateOfficeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOfficeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOffice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOfficeResponseValidationError{
					field:  "Office",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOfficeResponseValidationError{
					field:  "Office",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOffice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOfficeResponseValidationError{
				field:  "Office",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOfficeResponseMultiError(errors)
	}

	return nil
}

// CreateOfficeResponseMultiError is an error wrapping multiple validation
// errors returned by CreateOfficeResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOfficeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOfficeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOfficeResponseMultiError) AllErrors() []error { return m }

// CreateOfficeResponseValidationError is the validation error returned by
// CreateOfficeResponse.Validate if the designated constraints aren't met.
type CreateOfficeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOfficeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOfficeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOfficeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOfficeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOfficeResponseValidationError) ErrorName() string {
	return "CreateOfficeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOfficeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOfficeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOfficeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOfficeResponseValidationError{}

// Validate checks the field values on UpdateOfficeByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOfficeByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOfficeByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOfficeByIdRequestMultiError, or nil if none found.
func (m *UpdateOfficeByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOfficeByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateOfficeByIdRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 3 {
		err := UpdateOfficeByIdRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDetail()) < 3 {
		err := UpdateOfficeByIdRequestValidationError{
			field:  "Detail",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateOfficeByIdRequestMultiError(errors)
	}

	return nil
}

// UpdateOfficeByIdRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateOfficeByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateOfficeByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOfficeByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOfficeByIdRequestMultiError) AllErrors() []error { return m }

// UpdateOfficeByIdRequestValidationError is the validation error returned by
// UpdateOfficeByIdRequest.Validate if the designated constraints aren't met.
type UpdateOfficeByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOfficeByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOfficeByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOfficeByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOfficeByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOfficeByIdRequestValidationError) ErrorName() string {
	return "UpdateOfficeByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOfficeByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOfficeByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOfficeByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOfficeByIdRequestValidationError{}

// Validate checks the field values on UpdateOfficeByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOfficeByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOfficeByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOfficeByIdResponseMultiError, or nil if none found.
func (m *UpdateOfficeByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOfficeByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOffice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOfficeByIdResponseValidationError{
					field:  "Office",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOfficeByIdResponseValidationError{
					field:  "Office",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOffice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOfficeByIdResponseValidationError{
				field:  "Office",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOfficeByIdResponseMultiError(errors)
	}

	return nil
}

// UpdateOfficeByIdResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateOfficeByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateOfficeByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOfficeByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOfficeByIdResponseMultiError) AllErrors() []error { return m }

// UpdateOfficeByIdResponseValidationError is the validation error returned by
// UpdateOfficeByIdResponse.Validate if the designated constraints aren't met.
type UpdateOfficeByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOfficeByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOfficeByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOfficeByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOfficeByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOfficeByIdResponseValidationError) ErrorName() string {
	return "UpdateOfficeByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOfficeByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOfficeByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOfficeByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOfficeByIdResponseValidationError{}

// Validate checks the field values on DeleteOfficeByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOfficeByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOfficeByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOfficeByIdRequestMultiError, or nil if none found.
func (m *DeleteOfficeByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOfficeByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteOfficeByIdRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteOfficeByIdRequestMultiError(errors)
	}

	return nil
}

// DeleteOfficeByIdRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteOfficeByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteOfficeByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOfficeByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOfficeByIdRequestMultiError) AllErrors() []error { return m }

// DeleteOfficeByIdRequestValidationError is the validation error returned by
// DeleteOfficeByIdRequest.Validate if the designated constraints aren't met.
type DeleteOfficeByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOfficeByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOfficeByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOfficeByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOfficeByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOfficeByIdRequestValidationError) ErrorName() string {
	return "DeleteOfficeByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOfficeByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOfficeByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOfficeByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOfficeByIdRequestValidationError{}

// Validate checks the field values on DeleteOfficeByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOfficeByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOfficeByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOfficeByIdResponseMultiError, or nil if none found.
func (m *DeleteOfficeByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOfficeByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteOfficeByIdResponseMultiError(errors)
	}

	return nil
}

// DeleteOfficeByIdResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteOfficeByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteOfficeByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOfficeByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOfficeByIdResponseMultiError) AllErrors() []error { return m }

// DeleteOfficeByIdResponseValidationError is the validation error returned by
// DeleteOfficeByIdResponse.Validate if the designated constraints aren't met.
type DeleteOfficeByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOfficeByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOfficeByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOfficeByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOfficeByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOfficeByIdResponseValidationError) ErrorName() string {
	return "DeleteOfficeByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOfficeByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOfficeByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOfficeByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOfficeByIdResponseValidationError{}

// Validate checks the field values on FindOfficesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindOfficesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindOfficesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindOfficesRequestMultiError, or nil if none found.
func (m *FindOfficesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindOfficesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Detail

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for Sort

	if len(errors) > 0 {
		return FindOfficesRequestMultiError(errors)
	}

	return nil
}

// FindOfficesRequestMultiError is an error wrapping multiple validation errors
// returned by FindOfficesRequest.ValidateAll() if the designated constraints
// aren't met.
type FindOfficesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindOfficesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindOfficesRequestMultiError) AllErrors() []error { return m }

// FindOfficesRequestValidationError is the validation error returned by
// FindOfficesRequest.Validate if the designated constraints aren't met.
type FindOfficesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindOfficesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindOfficesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindOfficesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindOfficesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindOfficesRequestValidationError) ErrorName() string {
	return "FindOfficesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindOfficesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindOfficesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindOfficesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindOfficesRequestValidationError{}

// Validate checks the field values on FindOfficesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindOfficesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindOfficesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindOfficesResponseMultiError, or nil if none found.
func (m *FindOfficesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindOfficesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalCount

	// no validation rules for TotalPages

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for HasMore

	for idx, item := range m.GetOffices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindOfficesResponseValidationError{
						field:  fmt.Sprintf("Offices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindOfficesResponseValidationError{
						field:  fmt.Sprintf("Offices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindOfficesResponseValidationError{
					field:  fmt.Sprintf("Offices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FindOfficesResponseMultiError(errors)
	}

	return nil
}

// FindOfficesResponseMultiError is an error wrapping multiple validation
// errors returned by FindOfficesResponse.ValidateAll() if the designated
// constraints aren't met.
type FindOfficesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindOfficesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindOfficesResponseMultiError) AllErrors() []error { return m }

// FindOfficesResponseValidationError is the validation error returned by
// FindOfficesResponse.Validate if the designated constraints aren't met.
type FindOfficesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindOfficesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindOfficesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindOfficesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindOfficesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindOfficesResponseValidationError) ErrorName() string {
	return "FindOfficesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindOfficesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindOfficesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindOfficesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindOfficesResponseValidationError{}

// Validate checks the field values on FindOfficeByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindOfficeByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindOfficeByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindOfficeByIdRequestMultiError, or nil if none found.
func (m *FindOfficeByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindOfficeByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := FindOfficeByIdRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FindOfficeByIdRequestMultiError(errors)
	}

	return nil
}

// FindOfficeByIdRequestMultiError is an error wrapping multiple validation
// errors returned by FindOfficeByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type FindOfficeByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindOfficeByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindOfficeByIdRequestMultiError) AllErrors() []error { return m }

// FindOfficeByIdRequestValidationError is the validation error returned by
// FindOfficeByIdRequest.Validate if the designated constraints aren't met.
type FindOfficeByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindOfficeByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindOfficeByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindOfficeByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindOfficeByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindOfficeByIdRequestValidationError) ErrorName() string {
	return "FindOfficeByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindOfficeByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindOfficeByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindOfficeByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindOfficeByIdRequestValidationError{}

// Validate checks the field values on FindOfficeByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindOfficeByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindOfficeByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindOfficeByIdResponseMultiError, or nil if none found.
func (m *FindOfficeByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindOfficeByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOffice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindOfficeByIdResponseValidationError{
					field:  "Office",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindOfficeByIdResponseValidationError{
					field:  "Office",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOffice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindOfficeByIdResponseValidationError{
				field:  "Office",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindOfficeByIdResponseMultiError(errors)
	}

	return nil
}

// FindOfficeByIdResponseMultiError is an error wrapping multiple validation
// errors returned by FindOfficeByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type FindOfficeByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindOfficeByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindOfficeByIdResponseMultiError) AllErrors() []error { return m }

// FindOfficeByIdResponseValidationError is the validation error returned by
// FindOfficeByIdResponse.Validate if the designated constraints aren't met.
type FindOfficeByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindOfficeByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindOfficeByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindOfficeByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindOfficeByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindOfficeByIdResponseValidationError) ErrorName() string {
	return "FindOfficeByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindOfficeByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindOfficeByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindOfficeByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindOfficeByIdResponseValidationError{}
