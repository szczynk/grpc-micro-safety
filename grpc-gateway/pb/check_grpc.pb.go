// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: check.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CheckServiceClient is the client API for CheckService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CheckServiceClient interface {
	CheckIn(ctx context.Context, in *CheckInRequest, opts ...grpc.CallOption) (*CheckInResponse, error)
	CheckOut(ctx context.Context, in *CheckOutRequest, opts ...grpc.CallOption) (*CheckOutResponse, error)
	FindChecks(ctx context.Context, in *FindChecksRequest, opts ...grpc.CallOption) (*FindChecksResponse, error)
	FindCheckById(ctx context.Context, in *FindCheckByIdRequest, opts ...grpc.CallOption) (*FindCheckByIdResponse, error)
}

type checkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckServiceClient(cc grpc.ClientConnInterface) CheckServiceClient {
	return &checkServiceClient{cc}
}

func (c *checkServiceClient) CheckIn(ctx context.Context, in *CheckInRequest, opts ...grpc.CallOption) (*CheckInResponse, error) {
	out := new(CheckInResponse)
	err := c.cc.Invoke(ctx, "/pb.CheckService/CheckIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkServiceClient) CheckOut(ctx context.Context, in *CheckOutRequest, opts ...grpc.CallOption) (*CheckOutResponse, error) {
	out := new(CheckOutResponse)
	err := c.cc.Invoke(ctx, "/pb.CheckService/CheckOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkServiceClient) FindChecks(ctx context.Context, in *FindChecksRequest, opts ...grpc.CallOption) (*FindChecksResponse, error) {
	out := new(FindChecksResponse)
	err := c.cc.Invoke(ctx, "/pb.CheckService/FindChecks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkServiceClient) FindCheckById(ctx context.Context, in *FindCheckByIdRequest, opts ...grpc.CallOption) (*FindCheckByIdResponse, error) {
	out := new(FindCheckByIdResponse)
	err := c.cc.Invoke(ctx, "/pb.CheckService/FindCheckById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckServiceServer is the server API for CheckService service.
// All implementations must embed UnimplementedCheckServiceServer
// for forward compatibility
type CheckServiceServer interface {
	CheckIn(context.Context, *CheckInRequest) (*CheckInResponse, error)
	CheckOut(context.Context, *CheckOutRequest) (*CheckOutResponse, error)
	FindChecks(context.Context, *FindChecksRequest) (*FindChecksResponse, error)
	FindCheckById(context.Context, *FindCheckByIdRequest) (*FindCheckByIdResponse, error)
	mustEmbedUnimplementedCheckServiceServer()
}

// UnimplementedCheckServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCheckServiceServer struct {
}

func (UnimplementedCheckServiceServer) CheckIn(context.Context, *CheckInRequest) (*CheckInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIn not implemented")
}
func (UnimplementedCheckServiceServer) CheckOut(context.Context, *CheckOutRequest) (*CheckOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOut not implemented")
}
func (UnimplementedCheckServiceServer) FindChecks(context.Context, *FindChecksRequest) (*FindChecksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindChecks not implemented")
}
func (UnimplementedCheckServiceServer) FindCheckById(context.Context, *FindCheckByIdRequest) (*FindCheckByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCheckById not implemented")
}
func (UnimplementedCheckServiceServer) mustEmbedUnimplementedCheckServiceServer() {}

// UnsafeCheckServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckServiceServer will
// result in compilation errors.
type UnsafeCheckServiceServer interface {
	mustEmbedUnimplementedCheckServiceServer()
}

func RegisterCheckServiceServer(s grpc.ServiceRegistrar, srv CheckServiceServer) {
	s.RegisterService(&CheckService_ServiceDesc, srv)
}

func _CheckService_CheckIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServiceServer).CheckIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CheckService/CheckIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServiceServer).CheckIn(ctx, req.(*CheckInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckService_CheckOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServiceServer).CheckOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CheckService/CheckOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServiceServer).CheckOut(ctx, req.(*CheckOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckService_FindChecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindChecksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServiceServer).FindChecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CheckService/FindChecks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServiceServer).FindChecks(ctx, req.(*FindChecksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CheckService_FindCheckById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCheckByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServiceServer).FindCheckById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CheckService/FindCheckById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServiceServer).FindCheckById(ctx, req.(*FindCheckByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CheckService_ServiceDesc is the grpc.ServiceDesc for CheckService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CheckService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CheckService",
	HandlerType: (*CheckServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckIn",
			Handler:    _CheckService_CheckIn_Handler,
		},
		{
			MethodName: "CheckOut",
			Handler:    _CheckService_CheckOut_Handler,
		},
		{
			MethodName: "FindChecks",
			Handler:    _CheckService_FindChecks_Handler,
		},
		{
			MethodName: "FindCheckById",
			Handler:    _CheckService_FindCheckById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "check.proto",
}
