// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: user_messages.proto

package pb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Username  string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Email     string                 `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Role      string                 `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	Avatar    string                 `protobuf:"bytes,5,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Verified  bool                   `protobuf:"varint,6,opt,name=verified,proto3" json:"verified,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_user_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_user_messages_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *User) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *User) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

func (x *User) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *User) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// Register
type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Email    string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_user_messages_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RegisterRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *RegisterRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type RegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User    *User  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_user_messages_proto_rawDescGZIP(), []int{2}
}

func (x *RegisterResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *RegisterResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Login
type LoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email    string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_user_messages_proto_rawDescGZIP(), []int{3}
}

func (x *LoginRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *LoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type LoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User                  *User                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	AccessToken           string                 `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	RefreshToken          string                 `protobuf:"bytes,3,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	AccessTokenExpiresAt  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=access_token_expires_at,json=accessTokenExpiresAt,proto3" json:"access_token_expires_at,omitempty"`
	RefreshTokenExpiresAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=refresh_token_expires_at,json=refreshTokenExpiresAt,proto3" json:"refresh_token_expires_at,omitempty"`
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_user_messages_proto_rawDescGZIP(), []int{4}
}

func (x *LoginResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *LoginResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *LoginResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *LoginResponse) GetAccessTokenExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AccessTokenExpiresAt
	}
	return nil
}

func (x *LoginResponse) GetRefreshTokenExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RefreshTokenExpiresAt
	}
	return nil
}

// ForgotPassword
type ForgotPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *ForgotPasswordRequest) Reset() {
	*x = ForgotPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForgotPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForgotPasswordRequest) ProtoMessage() {}

func (x *ForgotPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForgotPasswordRequest.ProtoReflect.Descriptor instead.
func (*ForgotPasswordRequest) Descriptor() ([]byte, []int) {
	return file_user_messages_proto_rawDescGZIP(), []int{5}
}

func (x *ForgotPasswordRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type ForgotPasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ForgotPasswordResponse) Reset() {
	*x = ForgotPasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForgotPasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForgotPasswordResponse) ProtoMessage() {}

func (x *ForgotPasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForgotPasswordResponse.ProtoReflect.Descriptor instead.
func (*ForgotPasswordResponse) Descriptor() ([]byte, []int) {
	return file_user_messages_proto_rawDescGZIP(), []int{6}
}

func (x *ForgotPasswordResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// ResetPassword
type ResetPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResetToken string `protobuf:"bytes,1,opt,name=reset_token,json=resetToken,proto3" json:"reset_token,omitempty"`
	Password   string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *ResetPasswordRequest) Reset() {
	*x = ResetPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPasswordRequest) ProtoMessage() {}

func (x *ResetPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPasswordRequest.ProtoReflect.Descriptor instead.
func (*ResetPasswordRequest) Descriptor() ([]byte, []int) {
	return file_user_messages_proto_rawDescGZIP(), []int{7}
}

func (x *ResetPasswordRequest) GetResetToken() string {
	if x != nil {
		return x.ResetToken
	}
	return ""
}

func (x *ResetPasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type ResetPasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ResetPasswordResponse) Reset() {
	*x = ResetPasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPasswordResponse) ProtoMessage() {}

func (x *ResetPasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPasswordResponse.ProtoReflect.Descriptor instead.
func (*ResetPasswordResponse) Descriptor() ([]byte, []int) {
	return file_user_messages_proto_rawDescGZIP(), []int{8}
}

func (x *ResetPasswordResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// VerifyEmail
type VerifyEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *VerifyEmailRequest) Reset() {
	*x = VerifyEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyEmailRequest) ProtoMessage() {}

func (x *VerifyEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyEmailRequest.ProtoReflect.Descriptor instead.
func (*VerifyEmailRequest) Descriptor() ([]byte, []int) {
	return file_user_messages_proto_rawDescGZIP(), []int{9}
}

func (x *VerifyEmailRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type VerifyEmailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *VerifyEmailResponse) Reset() {
	*x = VerifyEmailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyEmailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyEmailResponse) ProtoMessage() {}

func (x *VerifyEmailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyEmailResponse.ProtoReflect.Descriptor instead.
func (*VerifyEmailResponse) Descriptor() ([]byte, []int) {
	return file_user_messages_proto_rawDescGZIP(), []int{10}
}

func (x *VerifyEmailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Update Me
type UpdateMeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username *string `protobuf:"bytes,1,opt,name=username,proto3,oneof" json:"username,omitempty"`
	Avatar   *string `protobuf:"bytes,2,opt,name=avatar,proto3,oneof" json:"avatar,omitempty"`
}

func (x *UpdateMeRequest) Reset() {
	*x = UpdateMeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_messages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMeRequest) ProtoMessage() {}

func (x *UpdateMeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_messages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMeRequest.ProtoReflect.Descriptor instead.
func (*UpdateMeRequest) Descriptor() ([]byte, []int) {
	return file_user_messages_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateMeRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *UpdateMeRequest) GetAvatar() string {
	if x != nil && x.Avatar != nil {
		return *x.Avatar
	}
	return ""
}

type UpdateMeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *UpdateMeResponse) Reset() {
	*x = UpdateMeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_messages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMeResponse) ProtoMessage() {}

func (x *UpdateMeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_messages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMeResponse.ProtoReflect.Descriptor instead.
func (*UpdateMeResponse) Descriptor() ([]byte, []int) {
	return file_user_messages_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateMeResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

// Change Email
type ChangeEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *ChangeEmailRequest) Reset() {
	*x = ChangeEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_messages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeEmailRequest) ProtoMessage() {}

func (x *ChangeEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_messages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeEmailRequest.ProtoReflect.Descriptor instead.
func (*ChangeEmailRequest) Descriptor() ([]byte, []int) {
	return file_user_messages_proto_rawDescGZIP(), []int{13}
}

func (x *ChangeEmailRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type ChangeEmailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User    *User  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ChangeEmailResponse) Reset() {
	*x = ChangeEmailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_messages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeEmailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeEmailResponse) ProtoMessage() {}

func (x *ChangeEmailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_messages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeEmailResponse.ProtoReflect.Descriptor instead.
func (*ChangeEmailResponse) Descriptor() ([]byte, []int) {
	return file_user_messages_proto_rawDescGZIP(), []int{14}
}

func (x *ChangeEmailResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ChangeEmailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Refresh Access Token
type RefreshAccessTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshToken string `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
}

func (x *RefreshAccessTokenRequest) Reset() {
	*x = RefreshAccessTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_messages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshAccessTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshAccessTokenRequest) ProtoMessage() {}

func (x *RefreshAccessTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_messages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshAccessTokenRequest.ProtoReflect.Descriptor instead.
func (*RefreshAccessTokenRequest) Descriptor() ([]byte, []int) {
	return file_user_messages_proto_rawDescGZIP(), []int{15}
}

func (x *RefreshAccessTokenRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type RefreshAccessTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken          string                 `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	AccessTokenExpiresAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=access_token_expires_at,json=accessTokenExpiresAt,proto3" json:"access_token_expires_at,omitempty"`
}

func (x *RefreshAccessTokenResponse) Reset() {
	*x = RefreshAccessTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_messages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshAccessTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshAccessTokenResponse) ProtoMessage() {}

func (x *RefreshAccessTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_messages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshAccessTokenResponse.ProtoReflect.Descriptor instead.
func (*RefreshAccessTokenResponse) Descriptor() ([]byte, []int) {
	return file_user_messages_proto_rawDescGZIP(), []int{16}
}

func (x *RefreshAccessTokenResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *RefreshAccessTokenResponse) GetAccessTokenExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AccessTokenExpiresAt
	}
	return nil
}

// Logout
type LogoutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshToken string `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
}

func (x *LogoutRequest) Reset() {
	*x = LogoutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_messages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutRequest) ProtoMessage() {}

func (x *LogoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_messages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutRequest.ProtoReflect.Descriptor instead.
func (*LogoutRequest) Descriptor() ([]byte, []int) {
	return file_user_messages_proto_rawDescGZIP(), []int{17}
}

func (x *LogoutRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type LogoutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LogoutResponse) Reset() {
	*x = LogoutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_messages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutResponse) ProtoMessage() {}

func (x *LogoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_messages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutResponse.ProtoReflect.Descriptor instead.
func (*LogoutResponse) Descriptor() ([]byte, []int) {
	return file_user_messages_proto_rawDescGZIP(), []int{18}
}

// GetMe
type GetMeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMeRequest) Reset() {
	*x = GetMeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_messages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeRequest) ProtoMessage() {}

func (x *GetMeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_messages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeRequest.ProtoReflect.Descriptor instead.
func (*GetMeRequest) Descriptor() ([]byte, []int) {
	return file_user_messages_proto_rawDescGZIP(), []int{19}
}

type GetMeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *GetMeResponse) Reset() {
	*x = GetMeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_messages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMeResponse) ProtoMessage() {}

func (x *GetMeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_messages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMeResponse.ProtoReflect.Descriptor instead.
func (*GetMeResponse) Descriptor() ([]byte, []int) {
	return file_user_messages_proto_rawDescGZIP(), []int{20}
}

func (x *GetMeResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

// Create User
type CreateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Email    string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Role     string `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	Avatar   string `protobuf:"bytes,5,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Verified bool   `protobuf:"varint,6,opt,name=verified,proto3" json:"verified,omitempty"`
}

func (x *CreateUserRequest) Reset() {
	*x = CreateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_messages_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserRequest) ProtoMessage() {}

func (x *CreateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_messages_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserRequest.ProtoReflect.Descriptor instead.
func (*CreateUserRequest) Descriptor() ([]byte, []int) {
	return file_user_messages_proto_rawDescGZIP(), []int{21}
}

func (x *CreateUserRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CreateUserRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreateUserRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateUserRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *CreateUserRequest) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *CreateUserRequest) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

type CreateUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User    *User  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateUserResponse) Reset() {
	*x = CreateUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_messages_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserResponse) ProtoMessage() {}

func (x *CreateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_messages_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserResponse.ProtoReflect.Descriptor instead.
func (*CreateUserResponse) Descriptor() ([]byte, []int) {
	return file_user_messages_proto_rawDescGZIP(), []int{22}
}

func (x *CreateUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CreateUserResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Update User By ID
type UpdateUserByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Email    string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Role     string `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty"`
	Avatar   string `protobuf:"bytes,6,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Verified bool   `protobuf:"varint,7,opt,name=verified,proto3" json:"verified,omitempty"`
}

func (x *UpdateUserByIdRequest) Reset() {
	*x = UpdateUserByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_messages_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserByIdRequest) ProtoMessage() {}

func (x *UpdateUserByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_messages_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserByIdRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserByIdRequest) Descriptor() ([]byte, []int) {
	return file_user_messages_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateUserByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateUserByIdRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UpdateUserByIdRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UpdateUserByIdRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UpdateUserByIdRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *UpdateUserByIdRequest) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UpdateUserByIdRequest) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

type UpdateUserByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *UpdateUserByIdResponse) Reset() {
	*x = UpdateUserByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_messages_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserByIdResponse) ProtoMessage() {}

func (x *UpdateUserByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_messages_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserByIdResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserByIdResponse) Descriptor() ([]byte, []int) {
	return file_user_messages_proto_rawDescGZIP(), []int{24}
}

func (x *UpdateUserByIdResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

// Delete User By ID
type DeleteUserByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteUserByIdRequest) Reset() {
	*x = DeleteUserByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_messages_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserByIdRequest) ProtoMessage() {}

func (x *DeleteUserByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_messages_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserByIdRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserByIdRequest) Descriptor() ([]byte, []int) {
	return file_user_messages_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteUserByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteUserByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteUserByIdResponse) Reset() {
	*x = DeleteUserByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_messages_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserByIdResponse) ProtoMessage() {}

func (x *DeleteUserByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_messages_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserByIdResponse.ProtoReflect.Descriptor instead.
func (*DeleteUserByIdResponse) Descriptor() ([]byte, []int) {
	return file_user_messages_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteUserByIdResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Find Users
type FindUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Email    string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Role     string `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
	Verified string `protobuf:"bytes,4,opt,name=verified,proto3" json:"verified,omitempty"`
	Page     uint32 `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	Limit    uint32 `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Sort     string `protobuf:"bytes,7,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *FindUsersRequest) Reset() {
	*x = FindUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_messages_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUsersRequest) ProtoMessage() {}

func (x *FindUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_messages_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUsersRequest.ProtoReflect.Descriptor instead.
func (*FindUsersRequest) Descriptor() ([]byte, []int) {
	return file_user_messages_proto_rawDescGZIP(), []int{27}
}

func (x *FindUsersRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *FindUsersRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *FindUsersRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *FindUsersRequest) GetVerified() string {
	if x != nil {
		return x.Verified
	}
	return ""
}

func (x *FindUsersRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FindUsersRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *FindUsersRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

type FindUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount uint32  `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	TotalPages uint32  `protobuf:"varint,2,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
	Page       uint32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Limit      uint32  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	HasMore    bool    `protobuf:"varint,5,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	Users      []*User `protobuf:"bytes,6,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *FindUsersResponse) Reset() {
	*x = FindUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_messages_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUsersResponse) ProtoMessage() {}

func (x *FindUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_messages_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUsersResponse.ProtoReflect.Descriptor instead.
func (*FindUsersResponse) Descriptor() ([]byte, []int) {
	return file_user_messages_proto_rawDescGZIP(), []int{28}
}

func (x *FindUsersResponse) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *FindUsersResponse) GetTotalPages() uint32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

func (x *FindUsersResponse) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FindUsersResponse) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *FindUsersResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *FindUsersResponse) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

// Find User By ID
type FindUserByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FindUserByIdRequest) Reset() {
	*x = FindUserByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_messages_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindUserByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserByIdRequest) ProtoMessage() {}

func (x *FindUserByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_user_messages_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserByIdRequest.ProtoReflect.Descriptor instead.
func (*FindUserByIdRequest) Descriptor() ([]byte, []int) {
	return file_user_messages_proto_rawDescGZIP(), []int{29}
}

func (x *FindUserByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type FindUserByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *FindUserByIdResponse) Reset() {
	*x = FindUserByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_messages_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindUserByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserByIdResponse) ProtoMessage() {}

func (x *FindUserByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_user_messages_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserByIdResponse.ProtoReflect.Descriptor instead.
func (*FindUserByIdResponse) Descriptor() ([]byte, []int) {
	return file_user_messages_proto_rawDescGZIP(), []int{30}
}

func (x *FindUserByIdResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

var File_user_messages_proto protoreflect.FileDescriptor

var file_user_messages_proto_rawDesc = []byte{
	0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xbe, 0x03, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0x92, 0x41, 0x2f, 0x4a, 0x26, 0x22,
	0x32, 0x34, 0x33, 0x38, 0x61, 0x63, 0x33, 0x63, 0x2d, 0x33, 0x37, 0x65, 0x62, 0x2d, 0x34, 0x39,
	0x30, 0x32, 0x2d, 0x61, 0x64, 0x65, 0x66, 0x2d, 0x65, 0x64, 0x31, 0x36, 0x62, 0x34, 0x34, 0x33,
	0x31, 0x30, 0x33, 0x30, 0x22, 0xa2, 0x02, 0x04, 0x75, 0x75, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x4a, 0x09, 0x22, 0x6a, 0x6f, 0x68, 0x6e, 0x64, 0x65,
	0x65, 0x22, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15,
	0x4a, 0x13, 0x22, 0x6a, 0x6f, 0x68, 0x6e, 0x64, 0x65, 0x65, 0x40, 0x67, 0x6d, 0x61, 0x69, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x4a,
	0x06, 0x22, 0x75, 0x73, 0x65, 0x72, 0x22, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x56, 0x0a,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3e, 0x92,
	0x41, 0x3b, 0x4a, 0x39, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x73, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x62, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2d, 0x70, 0x65, 0x65, 0x70, 0x73,
	0x2f, 0x6a, 0x6f, 0x68, 0x6e, 0x64, 0x65, 0x65, 0x2e, 0x73, 0x76, 0x67, 0x22, 0x52, 0x06, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x27, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x4a, 0x06, 0x22, 0x74,
	0x72, 0x75, 0x65, 0x22, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0xaf, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x05, 0x92, 0x41, 0x0b, 0x4a, 0x09, 0x22, 0x6a, 0x6f, 0x68, 0x6e, 0x64, 0x65, 0x65,
	0x22, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x60, 0x01, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x6a, 0x6f, 0x68, 0x6e, 0x64, 0x65, 0x65,
	0x40, 0x67, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x08, 0x92, 0x41, 0x0c,
	0x4a, 0x0a, 0x22, 0x74, 0x65, 0x73, 0x74, 0x31, 0x32, 0x33, 0x34, 0x22, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x60, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0x92, 0x41, 0x43, 0x4a,
	0x41, 0x22, 0x57, 0x65, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x6a,
	0x6f, 0x68, 0x6e, 0x64, 0x65, 0x65, 0x40, 0x67, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x22, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x79, 0x0a, 0x0c, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x60, 0x01, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x6a, 0x6f, 0x68, 0x6e, 0x64, 0x65, 0x65,
	0x40, 0x67, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x08, 0x92, 0x41, 0x0c,
	0x4a, 0x0a, 0x22, 0x74, 0x65, 0x73, 0x74, 0x31, 0x32, 0x33, 0x34, 0x22, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x87, 0x0b, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0xd5, 0x04, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0xb1, 0x04,
	0x92, 0x41, 0xad, 0x04, 0x4a, 0xaa, 0x04, 0x22, 0x76, 0x32, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x2e, 0x66, 0x35, 0x43, 0x38, 0x56, 0x36, 0x6f, 0x4b, 0x6c, 0x77, 0x73, 0x73, 0x69, 0x34, 0x70,
	0x4d, 0x32, 0x78, 0x59, 0x52, 0x69, 0x4b, 0x62, 0x2d, 0x39, 0x78, 0x5f, 0x4b, 0x4e, 0x4e, 0x49,
	0x71, 0x35, 0x4a, 0x30, 0x73, 0x6a, 0x78, 0x49, 0x44, 0x30, 0x50, 0x6e, 0x63, 0x75, 0x41, 0x49,
	0x43, 0x47, 0x6b, 0x4d, 0x41, 0x54, 0x6c, 0x61, 0x6f, 0x49, 0x58, 0x61, 0x72, 0x44, 0x67, 0x65,
	0x34, 0x56, 0x58, 0x4d, 0x41, 0x72, 0x77, 0x54, 0x4f, 0x4e, 0x43, 0x67, 0x43, 0x64, 0x6a, 0x6b,
	0x75, 0x56, 0x67, 0x4d, 0x74, 0x72, 0x35, 0x77, 0x75, 0x38, 0x67, 0x54, 0x4e, 0x77, 0x4b, 0x43,
	0x54, 0x78, 0x49, 0x48, 0x6a, 0x4a, 0x4f, 0x73, 0x50, 0x4b, 0x71, 0x49, 0x2d, 0x75, 0x58, 0x53,
	0x53, 0x62, 0x37, 0x4a, 0x63, 0x78, 0x6c, 0x72, 0x54, 0x77, 0x31, 0x4c, 0x73, 0x34, 0x47, 0x7a,
	0x5f, 0x32, 0x51, 0x44, 0x79, 0x59, 0x65, 0x77, 0x78, 0x4a, 0x34, 0x54, 0x74, 0x34, 0x45, 0x4f,
	0x39, 0x65, 0x7a, 0x53, 0x6f, 0x6a, 0x77, 0x45, 0x39, 0x6b, 0x58, 0x73, 0x67, 0x66, 0x46, 0x4f,
	0x57, 0x78, 0x4d, 0x65, 0x5f, 0x38, 0x67, 0x6b, 0x4c, 0x6e, 0x61, 0x37, 0x5f, 0x5a, 0x6d, 0x33,
	0x67, 0x70, 0x47, 0x73, 0x73, 0x6b, 0x5f, 0x73, 0x52, 0x41, 0x6d, 0x70, 0x61, 0x76, 0x59, 0x48,
	0x77, 0x70, 0x6a, 0x38, 0x68, 0x76, 0x6b, 0x69, 0x54, 0x77, 0x47, 0x6e, 0x73, 0x71, 0x5f, 0x57,
	0x34, 0x44, 0x57, 0x6a, 0x43, 0x5a, 0x51, 0x62, 0x69, 0x76, 0x61, 0x2d, 0x4b, 0x4b, 0x62, 0x48,
	0x54, 0x43, 0x6b, 0x6c, 0x78, 0x63, 0x6e, 0x33, 0x63, 0x6f, 0x66, 0x70, 0x6e, 0x69, 0x44, 0x62,
	0x5a, 0x33, 0x34, 0x72, 0x48, 0x6b, 0x4c, 0x4f, 0x44, 0x63, 0x38, 0x5f, 0x42, 0x64, 0x45, 0x55,
	0x6a, 0x61, 0x4d, 0x4e, 0x46, 0x33, 0x56, 0x55, 0x32, 0x59, 0x56, 0x68, 0x51, 0x4a, 0x78, 0x47,
	0x68, 0x34, 0x46, 0x49, 0x54, 0x6b, 0x6d, 0x5f, 0x61, 0x64, 0x76, 0x64, 0x73, 0x37, 0x30, 0x73,
	0x31, 0x62, 0x6d, 0x31, 0x45, 0x69, 0x31, 0x54, 0x65, 0x34, 0x44, 0x49, 0x75, 0x57, 0x39, 0x75,
	0x34, 0x39, 0x6e, 0x48, 0x77, 0x5a, 0x56, 0x54, 0x73, 0x34, 0x58, 0x31, 0x31, 0x65, 0x36, 0x53,
	0x62, 0x58, 0x79, 0x37, 0x55, 0x72, 0x43, 0x65, 0x46, 0x7a, 0x66, 0x6f, 0x5a, 0x34, 0x34, 0x31,
	0x39, 0x75, 0x46, 0x4e, 0x33, 0x52, 0x51, 0x4c, 0x67, 0x77, 0x31, 0x7a, 0x55, 0x53, 0x54, 0x71,
	0x61, 0x36, 0x72, 0x73, 0x46, 0x79, 0x39, 0x6d, 0x73, 0x48, 0x5a, 0x4f, 0x48, 0x2d, 0x42, 0x6e,
	0x62, 0x35, 0x56, 0x69, 0x68, 0x6e, 0x55, 0x61, 0x6f, 0x49, 0x45, 0x65, 0x45, 0x66, 0x4c, 0x73,
	0x55, 0x49, 0x57, 0x4c, 0x49, 0x50, 0x35, 0x6b, 0x42, 0x48, 0x63, 0x6c, 0x65, 0x53, 0x66, 0x6c,
	0x6a, 0x77, 0x47, 0x4e, 0x71, 0x30, 0x6f, 0x7a, 0x74, 0x71, 0x77, 0x6d, 0x61, 0x52, 0x4a, 0x49,
	0x6c, 0x4e, 0x32, 0x68, 0x79, 0x54, 0x4a, 0x78, 0x79, 0x30, 0x58, 0x35, 0x67, 0x53, 0x70, 0x33,
	0x5a, 0x31, 0x37, 0x34, 0x31, 0x35, 0x30, 0x79, 0x2d, 0x5a, 0x79, 0x63, 0x6b, 0x45, 0x38, 0x4e,
	0x70, 0x34, 0x42, 0x35, 0x58, 0x35, 0x44, 0x30, 0x42, 0x45, 0x4c, 0x44, 0x34, 0x33, 0x7a, 0x4d,
	0x4f, 0x33, 0x46, 0x72, 0x50, 0x69, 0x33, 0x52, 0x55, 0x57, 0x6d, 0x36, 0x79, 0x77, 0x46, 0x69,
	0x46, 0x35, 0x50, 0x42, 0x4d, 0x43, 0x42, 0x52, 0x4a, 0x6a, 0x4e, 0x67, 0x76, 0x76, 0x2d, 0x52,
	0x6f, 0x64, 0x58, 0x32, 0x34, 0x57, 0x41, 0x2e, 0x55, 0x33, 0x70, 0x6a, 0x65, 0x6e, 0x6c, 0x75,
	0x61, 0x79, 0x42, 0x4a, 0x62, 0x6d, 0x6c, 0x30, 0x61, 0x57, 0x46, 0x30, 0x61, 0x58, 0x5a, 0x6c,
	0x49, 0x45, 0x56, 0x75, 0x64, 0x47, 0x56, 0x79, 0x63, 0x48, 0x4a, 0x70, 0x63, 0x32, 0x56, 0x7a,
	0x22, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0xd7,
	0x04, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0xb1, 0x04, 0x92, 0x41, 0xad, 0x04, 0x4a, 0xaa, 0x04,
	0x22, 0x76, 0x32, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x66, 0x35, 0x43, 0x38, 0x56, 0x36,
	0x6f, 0x4b, 0x6c, 0x77, 0x73, 0x73, 0x69, 0x34, 0x70, 0x4d, 0x32, 0x78, 0x59, 0x52, 0x69, 0x4b,
	0x62, 0x2d, 0x39, 0x78, 0x5f, 0x4b, 0x4e, 0x4e, 0x49, 0x71, 0x35, 0x4a, 0x30, 0x73, 0x6a, 0x78,
	0x49, 0x44, 0x30, 0x50, 0x6e, 0x63, 0x75, 0x41, 0x49, 0x43, 0x47, 0x6b, 0x4d, 0x41, 0x54, 0x6c,
	0x61, 0x6f, 0x49, 0x58, 0x61, 0x72, 0x44, 0x67, 0x65, 0x34, 0x56, 0x58, 0x4d, 0x41, 0x72, 0x77,
	0x54, 0x4f, 0x4e, 0x43, 0x67, 0x43, 0x64, 0x6a, 0x6b, 0x75, 0x56, 0x67, 0x4d, 0x74, 0x72, 0x35,
	0x77, 0x75, 0x38, 0x67, 0x54, 0x4e, 0x77, 0x4b, 0x43, 0x54, 0x78, 0x49, 0x48, 0x6a, 0x4a, 0x4f,
	0x73, 0x50, 0x4b, 0x71, 0x49, 0x2d, 0x75, 0x58, 0x53, 0x53, 0x62, 0x37, 0x4a, 0x63, 0x78, 0x6c,
	0x72, 0x54, 0x77, 0x31, 0x4c, 0x73, 0x34, 0x47, 0x7a, 0x5f, 0x32, 0x51, 0x44, 0x79, 0x59, 0x65,
	0x77, 0x78, 0x4a, 0x34, 0x54, 0x74, 0x34, 0x45, 0x4f, 0x39, 0x65, 0x7a, 0x53, 0x6f, 0x6a, 0x77,
	0x45, 0x39, 0x6b, 0x58, 0x73, 0x67, 0x66, 0x46, 0x4f, 0x57, 0x78, 0x4d, 0x65, 0x5f, 0x38, 0x67,
	0x6b, 0x4c, 0x6e, 0x61, 0x37, 0x5f, 0x5a, 0x6d, 0x33, 0x67, 0x70, 0x47, 0x73, 0x73, 0x6b, 0x5f,
	0x73, 0x52, 0x41, 0x6d, 0x70, 0x61, 0x76, 0x59, 0x48, 0x77, 0x70, 0x6a, 0x38, 0x68, 0x76, 0x6b,
	0x69, 0x54, 0x77, 0x47, 0x6e, 0x73, 0x71, 0x5f, 0x57, 0x34, 0x44, 0x57, 0x6a, 0x43, 0x5a, 0x51,
	0x62, 0x69, 0x76, 0x61, 0x2d, 0x4b, 0x4b, 0x62, 0x48, 0x54, 0x43, 0x6b, 0x6c, 0x78, 0x63, 0x6e,
	0x33, 0x63, 0x6f, 0x66, 0x70, 0x6e, 0x69, 0x44, 0x62, 0x5a, 0x33, 0x34, 0x72, 0x48, 0x6b, 0x4c,
	0x4f, 0x44, 0x63, 0x38, 0x5f, 0x42, 0x64, 0x45, 0x55, 0x6a, 0x61, 0x4d, 0x4e, 0x46, 0x33, 0x56,
	0x55, 0x32, 0x59, 0x56, 0x68, 0x51, 0x4a, 0x78, 0x47, 0x68, 0x34, 0x46, 0x49, 0x54, 0x6b, 0x6d,
	0x5f, 0x61, 0x64, 0x76, 0x64, 0x73, 0x37, 0x30, 0x73, 0x31, 0x62, 0x6d, 0x31, 0x45, 0x69, 0x31,
	0x54, 0x65, 0x34, 0x44, 0x49, 0x75, 0x57, 0x39, 0x75, 0x34, 0x39, 0x6e, 0x48, 0x77, 0x5a, 0x56,
	0x54, 0x73, 0x34, 0x58, 0x31, 0x31, 0x65, 0x36, 0x53, 0x62, 0x58, 0x79, 0x37, 0x55, 0x72, 0x43,
	0x65, 0x46, 0x7a, 0x66, 0x6f, 0x5a, 0x34, 0x34, 0x31, 0x39, 0x75, 0x46, 0x4e, 0x33, 0x52, 0x51,
	0x4c, 0x67, 0x77, 0x31, 0x7a, 0x55, 0x53, 0x54, 0x71, 0x61, 0x36, 0x72, 0x73, 0x46, 0x79, 0x39,
	0x6d, 0x73, 0x48, 0x5a, 0x4f, 0x48, 0x2d, 0x42, 0x6e, 0x62, 0x35, 0x56, 0x69, 0x68, 0x6e, 0x55,
	0x61, 0x6f, 0x49, 0x45, 0x65, 0x45, 0x66, 0x4c, 0x73, 0x55, 0x49, 0x57, 0x4c, 0x49, 0x50, 0x35,
	0x6b, 0x42, 0x48, 0x63, 0x6c, 0x65, 0x53, 0x66, 0x6c, 0x6a, 0x77, 0x47, 0x4e, 0x71, 0x30, 0x6f,
	0x7a, 0x74, 0x71, 0x77, 0x6d, 0x61, 0x52, 0x4a, 0x49, 0x6c, 0x4e, 0x32, 0x68, 0x79, 0x54, 0x4a,
	0x78, 0x79, 0x30, 0x58, 0x35, 0x67, 0x53, 0x70, 0x33, 0x5a, 0x31, 0x37, 0x34, 0x31, 0x35, 0x30,
	0x79, 0x2d, 0x5a, 0x79, 0x63, 0x6b, 0x45, 0x38, 0x4e, 0x70, 0x34, 0x42, 0x35, 0x58, 0x35, 0x44,
	0x30, 0x42, 0x45, 0x4c, 0x44, 0x34, 0x33, 0x7a, 0x4d, 0x4f, 0x33, 0x46, 0x72, 0x50, 0x69, 0x33,
	0x52, 0x55, 0x57, 0x6d, 0x36, 0x79, 0x77, 0x46, 0x69, 0x46, 0x35, 0x50, 0x42, 0x4d, 0x43, 0x42,
	0x52, 0x4a, 0x6a, 0x4e, 0x67, 0x76, 0x76, 0x2d, 0x52, 0x6f, 0x64, 0x58, 0x32, 0x34, 0x57, 0x41,
	0x2e, 0x55, 0x33, 0x70, 0x6a, 0x65, 0x6e, 0x6c, 0x75, 0x61, 0x79, 0x42, 0x4a, 0x62, 0x6d, 0x6c,
	0x30, 0x61, 0x57, 0x46, 0x30, 0x61, 0x58, 0x5a, 0x6c, 0x49, 0x45, 0x56, 0x75, 0x64, 0x47, 0x56,
	0x79, 0x63, 0x48, 0x4a, 0x70, 0x63, 0x32, 0x56, 0x7a, 0x22, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x51, 0x0a, 0x17, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x53, 0x0a, 0x18, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74,
	0x22, 0x4e, 0x0a, 0x15, 0x46, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x60,
	0x01, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x6a, 0x6f, 0x68, 0x6e, 0x64, 0x65, 0x65, 0x40, 0x67,
	0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x22, 0x7d, 0x0a, 0x16, 0x46, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x49, 0x92, 0x41, 0x46,
	0x4a, 0x44, 0x22, 0x57, 0x65, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20,
	0x74, 0x6f, 0x20, 0x6a, 0x6f, 0x68, 0x6e, 0x64, 0x65, 0x65, 0x40, 0x67, 0x6d, 0x61, 0x69, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x22, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x6b, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x08, 0x92, 0x41, 0x0c, 0x4a, 0x0a, 0x22, 0x74, 0x65, 0x73, 0x74, 0x31, 0x32, 0x33,
	0x34, 0x22, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x53, 0x0a, 0x15,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x4a, 0x1b, 0x22, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x22, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x28, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x53, 0x0a, 0x13, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x4a, 0x1d, 0x22, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x22, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xbe, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x05, 0x92,
	0x41, 0x0b, 0x4a, 0x09, 0x22, 0x6a, 0x6f, 0x68, 0x6e, 0x64, 0x65, 0x65, 0x22, 0x48, 0x00, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3e, 0x92, 0x41,
	0x3b, 0x4a, 0x39, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x73, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x62, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2d, 0x70, 0x65, 0x65, 0x70, 0x73, 0x2f,
	0x6a, 0x6f, 0x68, 0x6e, 0x64, 0x65, 0x65, 0x2e, 0x73, 0x76, 0x67, 0x22, 0x48, 0x01, 0x52, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x22, 0x30, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x22, 0x4b, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x60,
	0x01, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x6a, 0x6f, 0x68, 0x6e, 0x64, 0x65, 0x65, 0x40, 0x67,
	0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x22, 0x95, 0x01, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x60, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0x92, 0x41, 0x43, 0x4a, 0x41, 0x22, 0x57,
	0x65, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x6a, 0x6f, 0x68, 0x6e,
	0x64, 0x65, 0x65, 0x40, 0x67, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x22, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xf5, 0x04, 0x0a, 0x19, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xd7, 0x04, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xb1,
	0x04, 0x92, 0x41, 0xad, 0x04, 0x4a, 0xaa, 0x04, 0x22, 0x76, 0x32, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x2e, 0x66, 0x35, 0x43, 0x38, 0x56, 0x36, 0x6f, 0x4b, 0x6c, 0x77, 0x73, 0x73, 0x69, 0x34,
	0x70, 0x4d, 0x32, 0x78, 0x59, 0x52, 0x69, 0x4b, 0x62, 0x2d, 0x39, 0x78, 0x5f, 0x4b, 0x4e, 0x4e,
	0x49, 0x71, 0x35, 0x4a, 0x30, 0x73, 0x6a, 0x78, 0x49, 0x44, 0x30, 0x50, 0x6e, 0x63, 0x75, 0x41,
	0x49, 0x43, 0x47, 0x6b, 0x4d, 0x41, 0x54, 0x6c, 0x61, 0x6f, 0x49, 0x58, 0x61, 0x72, 0x44, 0x67,
	0x65, 0x34, 0x56, 0x58, 0x4d, 0x41, 0x72, 0x77, 0x54, 0x4f, 0x4e, 0x43, 0x67, 0x43, 0x64, 0x6a,
	0x6b, 0x75, 0x56, 0x67, 0x4d, 0x74, 0x72, 0x35, 0x77, 0x75, 0x38, 0x67, 0x54, 0x4e, 0x77, 0x4b,
	0x43, 0x54, 0x78, 0x49, 0x48, 0x6a, 0x4a, 0x4f, 0x73, 0x50, 0x4b, 0x71, 0x49, 0x2d, 0x75, 0x58,
	0x53, 0x53, 0x62, 0x37, 0x4a, 0x63, 0x78, 0x6c, 0x72, 0x54, 0x77, 0x31, 0x4c, 0x73, 0x34, 0x47,
	0x7a, 0x5f, 0x32, 0x51, 0x44, 0x79, 0x59, 0x65, 0x77, 0x78, 0x4a, 0x34, 0x54, 0x74, 0x34, 0x45,
	0x4f, 0x39, 0x65, 0x7a, 0x53, 0x6f, 0x6a, 0x77, 0x45, 0x39, 0x6b, 0x58, 0x73, 0x67, 0x66, 0x46,
	0x4f, 0x57, 0x78, 0x4d, 0x65, 0x5f, 0x38, 0x67, 0x6b, 0x4c, 0x6e, 0x61, 0x37, 0x5f, 0x5a, 0x6d,
	0x33, 0x67, 0x70, 0x47, 0x73, 0x73, 0x6b, 0x5f, 0x73, 0x52, 0x41, 0x6d, 0x70, 0x61, 0x76, 0x59,
	0x48, 0x77, 0x70, 0x6a, 0x38, 0x68, 0x76, 0x6b, 0x69, 0x54, 0x77, 0x47, 0x6e, 0x73, 0x71, 0x5f,
	0x57, 0x34, 0x44, 0x57, 0x6a, 0x43, 0x5a, 0x51, 0x62, 0x69, 0x76, 0x61, 0x2d, 0x4b, 0x4b, 0x62,
	0x48, 0x54, 0x43, 0x6b, 0x6c, 0x78, 0x63, 0x6e, 0x33, 0x63, 0x6f, 0x66, 0x70, 0x6e, 0x69, 0x44,
	0x62, 0x5a, 0x33, 0x34, 0x72, 0x48, 0x6b, 0x4c, 0x4f, 0x44, 0x63, 0x38, 0x5f, 0x42, 0x64, 0x45,
	0x55, 0x6a, 0x61, 0x4d, 0x4e, 0x46, 0x33, 0x56, 0x55, 0x32, 0x59, 0x56, 0x68, 0x51, 0x4a, 0x78,
	0x47, 0x68, 0x34, 0x46, 0x49, 0x54, 0x6b, 0x6d, 0x5f, 0x61, 0x64, 0x76, 0x64, 0x73, 0x37, 0x30,
	0x73, 0x31, 0x62, 0x6d, 0x31, 0x45, 0x69, 0x31, 0x54, 0x65, 0x34, 0x44, 0x49, 0x75, 0x57, 0x39,
	0x75, 0x34, 0x39, 0x6e, 0x48, 0x77, 0x5a, 0x56, 0x54, 0x73, 0x34, 0x58, 0x31, 0x31, 0x65, 0x36,
	0x53, 0x62, 0x58, 0x79, 0x37, 0x55, 0x72, 0x43, 0x65, 0x46, 0x7a, 0x66, 0x6f, 0x5a, 0x34, 0x34,
	0x31, 0x39, 0x75, 0x46, 0x4e, 0x33, 0x52, 0x51, 0x4c, 0x67, 0x77, 0x31, 0x7a, 0x55, 0x53, 0x54,
	0x71, 0x61, 0x36, 0x72, 0x73, 0x46, 0x79, 0x39, 0x6d, 0x73, 0x48, 0x5a, 0x4f, 0x48, 0x2d, 0x42,
	0x6e, 0x62, 0x35, 0x56, 0x69, 0x68, 0x6e, 0x55, 0x61, 0x6f, 0x49, 0x45, 0x65, 0x45, 0x66, 0x4c,
	0x73, 0x55, 0x49, 0x57, 0x4c, 0x49, 0x50, 0x35, 0x6b, 0x42, 0x48, 0x63, 0x6c, 0x65, 0x53, 0x66,
	0x6c, 0x6a, 0x77, 0x47, 0x4e, 0x71, 0x30, 0x6f, 0x7a, 0x74, 0x71, 0x77, 0x6d, 0x61, 0x52, 0x4a,
	0x49, 0x6c, 0x4e, 0x32, 0x68, 0x79, 0x54, 0x4a, 0x78, 0x79, 0x30, 0x58, 0x35, 0x67, 0x53, 0x70,
	0x33, 0x5a, 0x31, 0x37, 0x34, 0x31, 0x35, 0x30, 0x79, 0x2d, 0x5a, 0x79, 0x63, 0x6b, 0x45, 0x38,
	0x4e, 0x70, 0x34, 0x42, 0x35, 0x58, 0x35, 0x44, 0x30, 0x42, 0x45, 0x4c, 0x44, 0x34, 0x33, 0x7a,
	0x4d, 0x4f, 0x33, 0x46, 0x72, 0x50, 0x69, 0x33, 0x52, 0x55, 0x57, 0x6d, 0x36, 0x79, 0x77, 0x46,
	0x69, 0x46, 0x35, 0x50, 0x42, 0x4d, 0x43, 0x42, 0x52, 0x4a, 0x6a, 0x4e, 0x67, 0x76, 0x76, 0x2d,
	0x52, 0x6f, 0x64, 0x58, 0x32, 0x34, 0x57, 0x41, 0x2e, 0x55, 0x33, 0x70, 0x6a, 0x65, 0x6e, 0x6c,
	0x75, 0x61, 0x79, 0x42, 0x4a, 0x62, 0x6d, 0x6c, 0x30, 0x61, 0x57, 0x46, 0x30, 0x61, 0x58, 0x5a,
	0x6c, 0x49, 0x45, 0x56, 0x75, 0x64, 0x47, 0x56, 0x79, 0x63, 0x48, 0x4a, 0x70, 0x63, 0x32, 0x56,
	0x7a, 0x22, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0xc7, 0x05, 0x0a, 0x1a, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0xd5, 0x04, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xb1, 0x04, 0x92, 0x41, 0xad, 0x04, 0x4a, 0xaa, 0x04,
	0x22, 0x76, 0x32, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x66, 0x35, 0x43, 0x38, 0x56, 0x36,
	0x6f, 0x4b, 0x6c, 0x77, 0x73, 0x73, 0x69, 0x34, 0x70, 0x4d, 0x32, 0x78, 0x59, 0x52, 0x69, 0x4b,
	0x62, 0x2d, 0x39, 0x78, 0x5f, 0x4b, 0x4e, 0x4e, 0x49, 0x71, 0x35, 0x4a, 0x30, 0x73, 0x6a, 0x78,
	0x49, 0x44, 0x30, 0x50, 0x6e, 0x63, 0x75, 0x41, 0x49, 0x43, 0x47, 0x6b, 0x4d, 0x41, 0x54, 0x6c,
	0x61, 0x6f, 0x49, 0x58, 0x61, 0x72, 0x44, 0x67, 0x65, 0x34, 0x56, 0x58, 0x4d, 0x41, 0x72, 0x77,
	0x54, 0x4f, 0x4e, 0x43, 0x67, 0x43, 0x64, 0x6a, 0x6b, 0x75, 0x56, 0x67, 0x4d, 0x74, 0x72, 0x35,
	0x77, 0x75, 0x38, 0x67, 0x54, 0x4e, 0x77, 0x4b, 0x43, 0x54, 0x78, 0x49, 0x48, 0x6a, 0x4a, 0x4f,
	0x73, 0x50, 0x4b, 0x71, 0x49, 0x2d, 0x75, 0x58, 0x53, 0x53, 0x62, 0x37, 0x4a, 0x63, 0x78, 0x6c,
	0x72, 0x54, 0x77, 0x31, 0x4c, 0x73, 0x34, 0x47, 0x7a, 0x5f, 0x32, 0x51, 0x44, 0x79, 0x59, 0x65,
	0x77, 0x78, 0x4a, 0x34, 0x54, 0x74, 0x34, 0x45, 0x4f, 0x39, 0x65, 0x7a, 0x53, 0x6f, 0x6a, 0x77,
	0x45, 0x39, 0x6b, 0x58, 0x73, 0x67, 0x66, 0x46, 0x4f, 0x57, 0x78, 0x4d, 0x65, 0x5f, 0x38, 0x67,
	0x6b, 0x4c, 0x6e, 0x61, 0x37, 0x5f, 0x5a, 0x6d, 0x33, 0x67, 0x70, 0x47, 0x73, 0x73, 0x6b, 0x5f,
	0x73, 0x52, 0x41, 0x6d, 0x70, 0x61, 0x76, 0x59, 0x48, 0x77, 0x70, 0x6a, 0x38, 0x68, 0x76, 0x6b,
	0x69, 0x54, 0x77, 0x47, 0x6e, 0x73, 0x71, 0x5f, 0x57, 0x34, 0x44, 0x57, 0x6a, 0x43, 0x5a, 0x51,
	0x62, 0x69, 0x76, 0x61, 0x2d, 0x4b, 0x4b, 0x62, 0x48, 0x54, 0x43, 0x6b, 0x6c, 0x78, 0x63, 0x6e,
	0x33, 0x63, 0x6f, 0x66, 0x70, 0x6e, 0x69, 0x44, 0x62, 0x5a, 0x33, 0x34, 0x72, 0x48, 0x6b, 0x4c,
	0x4f, 0x44, 0x63, 0x38, 0x5f, 0x42, 0x64, 0x45, 0x55, 0x6a, 0x61, 0x4d, 0x4e, 0x46, 0x33, 0x56,
	0x55, 0x32, 0x59, 0x56, 0x68, 0x51, 0x4a, 0x78, 0x47, 0x68, 0x34, 0x46, 0x49, 0x54, 0x6b, 0x6d,
	0x5f, 0x61, 0x64, 0x76, 0x64, 0x73, 0x37, 0x30, 0x73, 0x31, 0x62, 0x6d, 0x31, 0x45, 0x69, 0x31,
	0x54, 0x65, 0x34, 0x44, 0x49, 0x75, 0x57, 0x39, 0x75, 0x34, 0x39, 0x6e, 0x48, 0x77, 0x5a, 0x56,
	0x54, 0x73, 0x34, 0x58, 0x31, 0x31, 0x65, 0x36, 0x53, 0x62, 0x58, 0x79, 0x37, 0x55, 0x72, 0x43,
	0x65, 0x46, 0x7a, 0x66, 0x6f, 0x5a, 0x34, 0x34, 0x31, 0x39, 0x75, 0x46, 0x4e, 0x33, 0x52, 0x51,
	0x4c, 0x67, 0x77, 0x31, 0x7a, 0x55, 0x53, 0x54, 0x71, 0x61, 0x36, 0x72, 0x73, 0x46, 0x79, 0x39,
	0x6d, 0x73, 0x48, 0x5a, 0x4f, 0x48, 0x2d, 0x42, 0x6e, 0x62, 0x35, 0x56, 0x69, 0x68, 0x6e, 0x55,
	0x61, 0x6f, 0x49, 0x45, 0x65, 0x45, 0x66, 0x4c, 0x73, 0x55, 0x49, 0x57, 0x4c, 0x49, 0x50, 0x35,
	0x6b, 0x42, 0x48, 0x63, 0x6c, 0x65, 0x53, 0x66, 0x6c, 0x6a, 0x77, 0x47, 0x4e, 0x71, 0x30, 0x6f,
	0x7a, 0x74, 0x71, 0x77, 0x6d, 0x61, 0x52, 0x4a, 0x49, 0x6c, 0x4e, 0x32, 0x68, 0x79, 0x54, 0x4a,
	0x78, 0x79, 0x30, 0x58, 0x35, 0x67, 0x53, 0x70, 0x33, 0x5a, 0x31, 0x37, 0x34, 0x31, 0x35, 0x30,
	0x79, 0x2d, 0x5a, 0x79, 0x63, 0x6b, 0x45, 0x38, 0x4e, 0x70, 0x34, 0x42, 0x35, 0x58, 0x35, 0x44,
	0x30, 0x42, 0x45, 0x4c, 0x44, 0x34, 0x33, 0x7a, 0x4d, 0x4f, 0x33, 0x46, 0x72, 0x50, 0x69, 0x33,
	0x52, 0x55, 0x57, 0x6d, 0x36, 0x79, 0x77, 0x46, 0x69, 0x46, 0x35, 0x50, 0x42, 0x4d, 0x43, 0x42,
	0x52, 0x4a, 0x6a, 0x4e, 0x67, 0x76, 0x76, 0x2d, 0x52, 0x6f, 0x64, 0x58, 0x32, 0x34, 0x57, 0x41,
	0x2e, 0x55, 0x33, 0x70, 0x6a, 0x65, 0x6e, 0x6c, 0x75, 0x61, 0x79, 0x42, 0x4a, 0x62, 0x6d, 0x6c,
	0x30, 0x61, 0x57, 0x46, 0x30, 0x61, 0x58, 0x5a, 0x6c, 0x49, 0x45, 0x56, 0x75, 0x64, 0x47, 0x56,
	0x79, 0x63, 0x48, 0x4a, 0x70, 0x63, 0x32, 0x56, 0x7a, 0x22, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x51, 0x0a, 0x17, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x22, 0xe9, 0x04, 0x0a, 0x0d, 0x4c,
	0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0xd7, 0x04, 0x0a,
	0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0xb1, 0x04, 0x92, 0x41, 0xad, 0x04, 0x4a, 0xaa, 0x04, 0x22, 0x76,
	0x32, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x66, 0x35, 0x43, 0x38, 0x56, 0x36, 0x6f, 0x4b,
	0x6c, 0x77, 0x73, 0x73, 0x69, 0x34, 0x70, 0x4d, 0x32, 0x78, 0x59, 0x52, 0x69, 0x4b, 0x62, 0x2d,
	0x39, 0x78, 0x5f, 0x4b, 0x4e, 0x4e, 0x49, 0x71, 0x35, 0x4a, 0x30, 0x73, 0x6a, 0x78, 0x49, 0x44,
	0x30, 0x50, 0x6e, 0x63, 0x75, 0x41, 0x49, 0x43, 0x47, 0x6b, 0x4d, 0x41, 0x54, 0x6c, 0x61, 0x6f,
	0x49, 0x58, 0x61, 0x72, 0x44, 0x67, 0x65, 0x34, 0x56, 0x58, 0x4d, 0x41, 0x72, 0x77, 0x54, 0x4f,
	0x4e, 0x43, 0x67, 0x43, 0x64, 0x6a, 0x6b, 0x75, 0x56, 0x67, 0x4d, 0x74, 0x72, 0x35, 0x77, 0x75,
	0x38, 0x67, 0x54, 0x4e, 0x77, 0x4b, 0x43, 0x54, 0x78, 0x49, 0x48, 0x6a, 0x4a, 0x4f, 0x73, 0x50,
	0x4b, 0x71, 0x49, 0x2d, 0x75, 0x58, 0x53, 0x53, 0x62, 0x37, 0x4a, 0x63, 0x78, 0x6c, 0x72, 0x54,
	0x77, 0x31, 0x4c, 0x73, 0x34, 0x47, 0x7a, 0x5f, 0x32, 0x51, 0x44, 0x79, 0x59, 0x65, 0x77, 0x78,
	0x4a, 0x34, 0x54, 0x74, 0x34, 0x45, 0x4f, 0x39, 0x65, 0x7a, 0x53, 0x6f, 0x6a, 0x77, 0x45, 0x39,
	0x6b, 0x58, 0x73, 0x67, 0x66, 0x46, 0x4f, 0x57, 0x78, 0x4d, 0x65, 0x5f, 0x38, 0x67, 0x6b, 0x4c,
	0x6e, 0x61, 0x37, 0x5f, 0x5a, 0x6d, 0x33, 0x67, 0x70, 0x47, 0x73, 0x73, 0x6b, 0x5f, 0x73, 0x52,
	0x41, 0x6d, 0x70, 0x61, 0x76, 0x59, 0x48, 0x77, 0x70, 0x6a, 0x38, 0x68, 0x76, 0x6b, 0x69, 0x54,
	0x77, 0x47, 0x6e, 0x73, 0x71, 0x5f, 0x57, 0x34, 0x44, 0x57, 0x6a, 0x43, 0x5a, 0x51, 0x62, 0x69,
	0x76, 0x61, 0x2d, 0x4b, 0x4b, 0x62, 0x48, 0x54, 0x43, 0x6b, 0x6c, 0x78, 0x63, 0x6e, 0x33, 0x63,
	0x6f, 0x66, 0x70, 0x6e, 0x69, 0x44, 0x62, 0x5a, 0x33, 0x34, 0x72, 0x48, 0x6b, 0x4c, 0x4f, 0x44,
	0x63, 0x38, 0x5f, 0x42, 0x64, 0x45, 0x55, 0x6a, 0x61, 0x4d, 0x4e, 0x46, 0x33, 0x56, 0x55, 0x32,
	0x59, 0x56, 0x68, 0x51, 0x4a, 0x78, 0x47, 0x68, 0x34, 0x46, 0x49, 0x54, 0x6b, 0x6d, 0x5f, 0x61,
	0x64, 0x76, 0x64, 0x73, 0x37, 0x30, 0x73, 0x31, 0x62, 0x6d, 0x31, 0x45, 0x69, 0x31, 0x54, 0x65,
	0x34, 0x44, 0x49, 0x75, 0x57, 0x39, 0x75, 0x34, 0x39, 0x6e, 0x48, 0x77, 0x5a, 0x56, 0x54, 0x73,
	0x34, 0x58, 0x31, 0x31, 0x65, 0x36, 0x53, 0x62, 0x58, 0x79, 0x37, 0x55, 0x72, 0x43, 0x65, 0x46,
	0x7a, 0x66, 0x6f, 0x5a, 0x34, 0x34, 0x31, 0x39, 0x75, 0x46, 0x4e, 0x33, 0x52, 0x51, 0x4c, 0x67,
	0x77, 0x31, 0x7a, 0x55, 0x53, 0x54, 0x71, 0x61, 0x36, 0x72, 0x73, 0x46, 0x79, 0x39, 0x6d, 0x73,
	0x48, 0x5a, 0x4f, 0x48, 0x2d, 0x42, 0x6e, 0x62, 0x35, 0x56, 0x69, 0x68, 0x6e, 0x55, 0x61, 0x6f,
	0x49, 0x45, 0x65, 0x45, 0x66, 0x4c, 0x73, 0x55, 0x49, 0x57, 0x4c, 0x49, 0x50, 0x35, 0x6b, 0x42,
	0x48, 0x63, 0x6c, 0x65, 0x53, 0x66, 0x6c, 0x6a, 0x77, 0x47, 0x4e, 0x71, 0x30, 0x6f, 0x7a, 0x74,
	0x71, 0x77, 0x6d, 0x61, 0x52, 0x4a, 0x49, 0x6c, 0x4e, 0x32, 0x68, 0x79, 0x54, 0x4a, 0x78, 0x79,
	0x30, 0x58, 0x35, 0x67, 0x53, 0x70, 0x33, 0x5a, 0x31, 0x37, 0x34, 0x31, 0x35, 0x30, 0x79, 0x2d,
	0x5a, 0x79, 0x63, 0x6b, 0x45, 0x38, 0x4e, 0x70, 0x34, 0x42, 0x35, 0x58, 0x35, 0x44, 0x30, 0x42,
	0x45, 0x4c, 0x44, 0x34, 0x33, 0x7a, 0x4d, 0x4f, 0x33, 0x46, 0x72, 0x50, 0x69, 0x33, 0x52, 0x55,
	0x57, 0x6d, 0x36, 0x79, 0x77, 0x46, 0x69, 0x46, 0x35, 0x50, 0x42, 0x4d, 0x43, 0x42, 0x52, 0x4a,
	0x6a, 0x4e, 0x67, 0x76, 0x76, 0x2d, 0x52, 0x6f, 0x64, 0x58, 0x32, 0x34, 0x57, 0x41, 0x2e, 0x55,
	0x33, 0x70, 0x6a, 0x65, 0x6e, 0x6c, 0x75, 0x61, 0x79, 0x42, 0x4a, 0x62, 0x6d, 0x6c, 0x30, 0x61,
	0x57, 0x46, 0x30, 0x61, 0x58, 0x5a, 0x6c, 0x49, 0x45, 0x56, 0x75, 0x64, 0x47, 0x56, 0x79, 0x63,
	0x48, 0x4a, 0x70, 0x63, 0x32, 0x56, 0x7a, 0x22, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x10, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2d, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xd3, 0x02, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x15, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x05, 0x92, 0x41, 0x0b, 0x4a, 0x09, 0x22, 0x6a, 0x6f,
	0x68, 0x6e, 0x64, 0x65, 0x65, 0x22, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1f, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x60, 0x01, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x6a, 0x6f,
	0x68, 0x6e, 0x64, 0x65, 0x65, 0x40, 0x67, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x08, 0x92, 0x41, 0x0c, 0x4a, 0x0a, 0x22, 0x74, 0x65, 0x73, 0x74, 0x31, 0x32, 0x33, 0x34,
	0x22, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x4a, 0x06,
	0x22, 0x75, 0x73, 0x65, 0x72, 0x22, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3e, 0x92, 0x41,
	0x3b, 0x4a, 0x39, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x73, 0x2e, 0x64, 0x69, 0x63, 0x65, 0x62, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2d, 0x70, 0x65, 0x65, 0x70, 0x73, 0x2f,
	0x6a, 0x6f, 0x68, 0x6e, 0x64, 0x65, 0x65, 0x2e, 0x73, 0x76, 0x67, 0x22, 0x52, 0x06, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x12, 0x27, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x4a, 0x06, 0x22, 0x74, 0x72,
	0x75, 0x65, 0x22, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x94, 0x01,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x60, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x46, 0x92, 0x41, 0x43, 0x4a, 0x41, 0x22, 0x57, 0x65, 0x20, 0x73, 0x65,
	0x6e, 0x74, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x20, 0x61, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x63, 0x6f, 0x64, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x6a, 0x6f, 0x68, 0x6e, 0x64, 0x65, 0x65, 0x40,
	0x67, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x22, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xa3, 0x03, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0xb0, 0x01, 0x01, 0x92, 0x41, 0x2f, 0x4a, 0x26, 0x22, 0x32, 0x34, 0x33, 0x38, 0x61, 0x63,
	0x33, 0x63, 0x2d, 0x33, 0x37, 0x65, 0x62, 0x2d, 0x34, 0x39, 0x30, 0x32, 0x2d, 0x61, 0x64, 0x65,
	0x66, 0x2d, 0x65, 0x64, 0x31, 0x36, 0x62, 0x34, 0x34, 0x33, 0x31, 0x30, 0x33, 0x30, 0x22, 0xa2,
	0x02, 0x04, 0x75, 0x75, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x05, 0x92, 0x41, 0x0b, 0x4a, 0x09, 0x22, 0x6a, 0x6f, 0x68, 0x6e, 0x64,
	0x65, 0x65, 0x22, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x60, 0x01, 0x92, 0x41, 0x15, 0x4a, 0x13, 0x22, 0x6a, 0x6f, 0x68, 0x6e, 0x64,
	0x65, 0x65, 0x40, 0x67, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x08, 0x92,
	0x41, 0x0c, 0x4a, 0x0a, 0x22, 0x74, 0x65, 0x73, 0x74, 0x31, 0x32, 0x33, 0x34, 0x22, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x4a, 0x06, 0x22, 0x75, 0x73,
	0x65, 0x72, 0x22, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x4a, 0x39,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x73,
	0x2e, 0x64, 0x69, 0x63, 0x65, 0x62, 0x65, 0x61, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2d, 0x70, 0x65, 0x65, 0x70, 0x73, 0x2f, 0x6a, 0x6f, 0x68,
	0x6e, 0x64, 0x65, 0x65, 0x2e, 0x73, 0x76, 0x67, 0x22, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x12, 0x27, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x4a, 0x06, 0x22, 0x74, 0x72, 0x75, 0x65, 0x22,
	0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x36, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x22, 0x63, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x92, 0x41, 0x2f, 0x4a, 0x26, 0x22, 0x32, 0x34, 0x33, 0x38, 0x61, 0x63, 0x33, 0x63, 0x2d,
	0x33, 0x37, 0x65, 0x62, 0x2d, 0x34, 0x39, 0x30, 0x32, 0x2d, 0x61, 0x64, 0x65, 0x66, 0x2d, 0x65,
	0x64, 0x31, 0x36, 0x62, 0x34, 0x34, 0x33, 0x31, 0x30, 0x33, 0x30, 0x22, 0xa2, 0x02, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0x54, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x4a, 0x1b, 0x22, 0x55, 0x73, 0x65, 0x72, 0x20, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x6c, 0x79, 0x22, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xbd, 0x02,
	0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x4a, 0x09, 0x22, 0x6a, 0x6f, 0x68, 0x6e,
	0x64, 0x65, 0x65, 0x22, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92,
	0x41, 0x15, 0x4a, 0x13, 0x22, 0x6a, 0x6f, 0x68, 0x6e, 0x64, 0x65, 0x65, 0x40, 0x67, 0x6d, 0x61,
	0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x26,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x08, 0x92, 0x41, 0x08, 0x4a, 0x06, 0x22, 0x75, 0x73, 0x65, 0x72, 0x22,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x4a, 0x06, 0x22,
	0x74, 0x72, 0x75, 0x65, 0x22, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x08, 0x92,
	0x41, 0x05, 0x4a, 0x03, 0x22, 0x31, 0x22, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0c, 0x92, 0x41,
	0x09, 0x3a, 0x01, 0x35, 0x4a, 0x04, 0x22, 0x31, 0x30, 0x22, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x3a, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x26, 0x92, 0x41, 0x23, 0x3a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x3a, 0x64, 0x65, 0x73, 0x63, 0x4a, 0x10, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x3a, 0x61, 0x73, 0x63, 0x22, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0xf0, 0x01,
	0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0x92, 0x41, 0x06, 0x4a, 0x04, 0x22,
	0x31, 0x30, 0x22, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x29, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x08, 0x92, 0x41, 0x05, 0x4a, 0x03, 0x22, 0x32, 0x22, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x08, 0x92, 0x41, 0x05, 0x4a, 0x03, 0x22,
	0x31, 0x22, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x08, 0x92, 0x41, 0x05, 0x4a, 0x03, 0x22, 0x35,
	0x22, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f,
	0x6d, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x4a,
	0x06, 0x22, 0x74, 0x72, 0x75, 0x65, 0x22, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65,
	0x12, 0x1e, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x22, 0x61, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x3a, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x92, 0x41, 0x2f,
	0x4a, 0x26, 0x22, 0x32, 0x34, 0x33, 0x38, 0x61, 0x63, 0x33, 0x63, 0x2d, 0x33, 0x37, 0x65, 0x62,
	0x2d, 0x34, 0x39, 0x30, 0x32, 0x2d, 0x61, 0x64, 0x65, 0x66, 0x2d, 0x65, 0x64, 0x31, 0x36, 0x62,
	0x34, 0x34, 0x33, 0x31, 0x30, 0x33, 0x30, 0x22, 0xa2, 0x02, 0x04, 0x75, 0x75, 0x69, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x34, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x3b,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_user_messages_proto_rawDescOnce sync.Once
	file_user_messages_proto_rawDescData = file_user_messages_proto_rawDesc
)

func file_user_messages_proto_rawDescGZIP() []byte {
	file_user_messages_proto_rawDescOnce.Do(func() {
		file_user_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_messages_proto_rawDescData)
	})
	return file_user_messages_proto_rawDescData
}

var file_user_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_user_messages_proto_goTypes = []interface{}{
	(*User)(nil),                       // 0: pb.User
	(*RegisterRequest)(nil),            // 1: pb.RegisterRequest
	(*RegisterResponse)(nil),           // 2: pb.RegisterResponse
	(*LoginRequest)(nil),               // 3: pb.LoginRequest
	(*LoginResponse)(nil),              // 4: pb.LoginResponse
	(*ForgotPasswordRequest)(nil),      // 5: pb.ForgotPasswordRequest
	(*ForgotPasswordResponse)(nil),     // 6: pb.ForgotPasswordResponse
	(*ResetPasswordRequest)(nil),       // 7: pb.ResetPasswordRequest
	(*ResetPasswordResponse)(nil),      // 8: pb.ResetPasswordResponse
	(*VerifyEmailRequest)(nil),         // 9: pb.VerifyEmailRequest
	(*VerifyEmailResponse)(nil),        // 10: pb.VerifyEmailResponse
	(*UpdateMeRequest)(nil),            // 11: pb.UpdateMeRequest
	(*UpdateMeResponse)(nil),           // 12: pb.UpdateMeResponse
	(*ChangeEmailRequest)(nil),         // 13: pb.ChangeEmailRequest
	(*ChangeEmailResponse)(nil),        // 14: pb.ChangeEmailResponse
	(*RefreshAccessTokenRequest)(nil),  // 15: pb.RefreshAccessTokenRequest
	(*RefreshAccessTokenResponse)(nil), // 16: pb.RefreshAccessTokenResponse
	(*LogoutRequest)(nil),              // 17: pb.LogoutRequest
	(*LogoutResponse)(nil),             // 18: pb.LogoutResponse
	(*GetMeRequest)(nil),               // 19: pb.GetMeRequest
	(*GetMeResponse)(nil),              // 20: pb.GetMeResponse
	(*CreateUserRequest)(nil),          // 21: pb.CreateUserRequest
	(*CreateUserResponse)(nil),         // 22: pb.CreateUserResponse
	(*UpdateUserByIdRequest)(nil),      // 23: pb.UpdateUserByIdRequest
	(*UpdateUserByIdResponse)(nil),     // 24: pb.UpdateUserByIdResponse
	(*DeleteUserByIdRequest)(nil),      // 25: pb.DeleteUserByIdRequest
	(*DeleteUserByIdResponse)(nil),     // 26: pb.DeleteUserByIdResponse
	(*FindUsersRequest)(nil),           // 27: pb.FindUsersRequest
	(*FindUsersResponse)(nil),          // 28: pb.FindUsersResponse
	(*FindUserByIdRequest)(nil),        // 29: pb.FindUserByIdRequest
	(*FindUserByIdResponse)(nil),       // 30: pb.FindUserByIdResponse
	(*timestamppb.Timestamp)(nil),      // 31: google.protobuf.Timestamp
}
var file_user_messages_proto_depIdxs = []int32{
	31, // 0: pb.User.created_at:type_name -> google.protobuf.Timestamp
	31, // 1: pb.User.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 2: pb.RegisterResponse.user:type_name -> pb.User
	0,  // 3: pb.LoginResponse.user:type_name -> pb.User
	31, // 4: pb.LoginResponse.access_token_expires_at:type_name -> google.protobuf.Timestamp
	31, // 5: pb.LoginResponse.refresh_token_expires_at:type_name -> google.protobuf.Timestamp
	0,  // 6: pb.UpdateMeResponse.user:type_name -> pb.User
	0,  // 7: pb.ChangeEmailResponse.user:type_name -> pb.User
	31, // 8: pb.RefreshAccessTokenResponse.access_token_expires_at:type_name -> google.protobuf.Timestamp
	0,  // 9: pb.GetMeResponse.user:type_name -> pb.User
	0,  // 10: pb.CreateUserResponse.user:type_name -> pb.User
	0,  // 11: pb.UpdateUserByIdResponse.user:type_name -> pb.User
	0,  // 12: pb.FindUsersResponse.users:type_name -> pb.User
	0,  // 13: pb.FindUserByIdResponse.user:type_name -> pb.User
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_user_messages_proto_init() }
func file_user_messages_proto_init() {
	if File_user_messages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_user_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForgotPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForgotPasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_messages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetPasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_messages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_messages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyEmailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_messages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_messages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_messages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_messages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeEmailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_messages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshAccessTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_messages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshAccessTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_messages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_messages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_messages_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_messages_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_messages_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_messages_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_messages_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_messages_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_messages_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_messages_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_messages_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_messages_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_messages_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindUserByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_messages_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindUserByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_user_messages_proto_msgTypes[11].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_messages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_user_messages_proto_goTypes,
		DependencyIndexes: file_user_messages_proto_depIdxs,
		MessageInfos:      file_user_messages_proto_msgTypes,
	}.Build()
	File_user_messages_proto = out.File
	file_user_messages_proto_rawDesc = nil
	file_user_messages_proto_goTypes = nil
	file_user_messages_proto_depIdxs = nil
}
