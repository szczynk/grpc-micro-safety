// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: check_messages.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CheckInRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckInRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckInRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckInRequestMultiError,
// or nil if none found.
func (m *CheckInRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckInRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAttendanceId() <= 0 {
		err := CheckInRequestValidationError{
			field:  "AttendanceId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Temperature

	if len(errors) > 0 {
		return CheckInRequestMultiError(errors)
	}

	return nil
}

// CheckInRequestMultiError is an error wrapping multiple validation errors
// returned by CheckInRequest.ValidateAll() if the designated constraints
// aren't met.
type CheckInRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckInRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckInRequestMultiError) AllErrors() []error { return m }

// CheckInRequestValidationError is the validation error returned by
// CheckInRequest.Validate if the designated constraints aren't met.
type CheckInRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckInRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckInRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckInRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckInRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckInRequestValidationError) ErrorName() string { return "CheckInRequestValidationError" }

// Error satisfies the builtin error interface
func (e CheckInRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckInRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckInRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckInRequestValidationError{}

// Validate checks the field values on CheckInResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CheckInResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckInResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckInResponseMultiError, or nil if none found.
func (m *CheckInResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckInResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCheckIn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckInResponseValidationError{
					field:  "CheckIn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckInResponseValidationError{
					field:  "CheckIn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCheckIn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckInResponseValidationError{
				field:  "CheckIn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CheckInResponseMultiError(errors)
	}

	return nil
}

// CheckInResponseMultiError is an error wrapping multiple validation errors
// returned by CheckInResponse.ValidateAll() if the designated constraints
// aren't met.
type CheckInResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckInResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckInResponseMultiError) AllErrors() []error { return m }

// CheckInResponseValidationError is the validation error returned by
// CheckInResponse.Validate if the designated constraints aren't met.
type CheckInResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckInResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckInResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckInResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckInResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckInResponseValidationError) ErrorName() string { return "CheckInResponseValidationError" }

// Error satisfies the builtin error interface
func (e CheckInResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckInResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckInResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckInResponseValidationError{}

// Validate checks the field values on CheckOutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CheckOutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckOutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckOutRequestMultiError, or nil if none found.
func (m *CheckOutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckOutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAttendanceId() <= 0 {
		err := CheckOutRequestValidationError{
			field:  "AttendanceId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CheckOutRequestMultiError(errors)
	}

	return nil
}

// CheckOutRequestMultiError is an error wrapping multiple validation errors
// returned by CheckOutRequest.ValidateAll() if the designated constraints
// aren't met.
type CheckOutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckOutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckOutRequestMultiError) AllErrors() []error { return m }

// CheckOutRequestValidationError is the validation error returned by
// CheckOutRequest.Validate if the designated constraints aren't met.
type CheckOutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckOutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckOutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckOutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckOutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckOutRequestValidationError) ErrorName() string { return "CheckOutRequestValidationError" }

// Error satisfies the builtin error interface
func (e CheckOutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckOutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckOutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckOutRequestValidationError{}

// Validate checks the field values on CheckOutResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CheckOutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckOutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckOutResponseMultiError, or nil if none found.
func (m *CheckOutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckOutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCheckOut()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckOutResponseValidationError{
					field:  "CheckOut",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckOutResponseValidationError{
					field:  "CheckOut",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCheckOut()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckOutResponseValidationError{
				field:  "CheckOut",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CheckOutResponseMultiError(errors)
	}

	return nil
}

// CheckOutResponseMultiError is an error wrapping multiple validation errors
// returned by CheckOutResponse.ValidateAll() if the designated constraints
// aren't met.
type CheckOutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckOutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckOutResponseMultiError) AllErrors() []error { return m }

// CheckOutResponseValidationError is the validation error returned by
// CheckOutResponse.Validate if the designated constraints aren't met.
type CheckOutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckOutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckOutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckOutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckOutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckOutResponseValidationError) ErrorName() string { return "CheckOutResponseValidationError" }

// Error satisfies the builtin error interface
func (e CheckOutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckOutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckOutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckOutResponseValidationError{}

// Validate checks the field values on FindChecksRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FindChecksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindChecksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindChecksRequestMultiError, or nil if none found.
func (m *FindChecksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindChecksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ScheduleId

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for Sort

	if len(errors) > 0 {
		return FindChecksRequestMultiError(errors)
	}

	return nil
}

// FindChecksRequestMultiError is an error wrapping multiple validation errors
// returned by FindChecksRequest.ValidateAll() if the designated constraints
// aren't met.
type FindChecksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindChecksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindChecksRequestMultiError) AllErrors() []error { return m }

// FindChecksRequestValidationError is the validation error returned by
// FindChecksRequest.Validate if the designated constraints aren't met.
type FindChecksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindChecksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindChecksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindChecksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindChecksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindChecksRequestValidationError) ErrorName() string {
	return "FindChecksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindChecksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindChecksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindChecksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindChecksRequestValidationError{}

// Validate checks the field values on FindChecksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindChecksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindChecksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindChecksResponseMultiError, or nil if none found.
func (m *FindChecksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindChecksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalCount

	// no validation rules for TotalPages

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for HasMore

	for idx, item := range m.GetChecks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindChecksResponseValidationError{
						field:  fmt.Sprintf("Checks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindChecksResponseValidationError{
						field:  fmt.Sprintf("Checks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindChecksResponseValidationError{
					field:  fmt.Sprintf("Checks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FindChecksResponseMultiError(errors)
	}

	return nil
}

// FindChecksResponseMultiError is an error wrapping multiple validation errors
// returned by FindChecksResponse.ValidateAll() if the designated constraints
// aren't met.
type FindChecksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindChecksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindChecksResponseMultiError) AllErrors() []error { return m }

// FindChecksResponseValidationError is the validation error returned by
// FindChecksResponse.Validate if the designated constraints aren't met.
type FindChecksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindChecksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindChecksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindChecksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindChecksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindChecksResponseValidationError) ErrorName() string {
	return "FindChecksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindChecksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindChecksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindChecksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindChecksResponseValidationError{}

// Validate checks the field values on FindCheckByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindCheckByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindCheckByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindCheckByIdRequestMultiError, or nil if none found.
func (m *FindCheckByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindCheckByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAttendanceId() <= 0 {
		err := FindCheckByIdRequestValidationError{
			field:  "AttendanceId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FindCheckByIdRequestMultiError(errors)
	}

	return nil
}

// FindCheckByIdRequestMultiError is an error wrapping multiple validation
// errors returned by FindCheckByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type FindCheckByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindCheckByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindCheckByIdRequestMultiError) AllErrors() []error { return m }

// FindCheckByIdRequestValidationError is the validation error returned by
// FindCheckByIdRequest.Validate if the designated constraints aren't met.
type FindCheckByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindCheckByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindCheckByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindCheckByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindCheckByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindCheckByIdRequestValidationError) ErrorName() string {
	return "FindCheckByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindCheckByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindCheckByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindCheckByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindCheckByIdRequestValidationError{}

// Validate checks the field values on FindCheckByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindCheckByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindCheckByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindCheckByIdResponseMultiError, or nil if none found.
func (m *FindCheckByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindCheckByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCheck()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindCheckByIdResponseValidationError{
					field:  "Check",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindCheckByIdResponseValidationError{
					field:  "Check",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCheck()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindCheckByIdResponseValidationError{
				field:  "Check",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindCheckByIdResponseMultiError(errors)
	}

	return nil
}

// FindCheckByIdResponseMultiError is an error wrapping multiple validation
// errors returned by FindCheckByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type FindCheckByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindCheckByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindCheckByIdResponseMultiError) AllErrors() []error { return m }

// FindCheckByIdResponseValidationError is the validation error returned by
// FindCheckByIdResponse.Validate if the designated constraints aren't met.
type FindCheckByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindCheckByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindCheckByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindCheckByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindCheckByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindCheckByIdResponseValidationError) ErrorName() string {
	return "FindCheckByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindCheckByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindCheckByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindCheckByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindCheckByIdResponseValidationError{}
