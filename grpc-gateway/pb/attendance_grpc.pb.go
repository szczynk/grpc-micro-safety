// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: attendance.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AttendanceServiceClient is the client API for AttendanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttendanceServiceClient interface {
	CreateAttendance(ctx context.Context, in *CreateAttendanceRequest, opts ...grpc.CallOption) (*CreateAttendanceResponse, error)
	UpdateAttendanceById(ctx context.Context, in *UpdateAttendanceByIdRequest, opts ...grpc.CallOption) (*UpdateAttendanceByIdResponse, error)
	DeleteAttendanceById(ctx context.Context, in *DeleteAttendanceByIdRequest, opts ...grpc.CallOption) (*DeleteAttendanceByIdResponse, error)
	FindAttendances(ctx context.Context, in *FindAttendancesRequest, opts ...grpc.CallOption) (*FindAttendancesResponse, error)
	FindAttendanceById(ctx context.Context, in *FindAttendanceByIdRequest, opts ...grpc.CallOption) (*FindAttendanceByIdResponse, error)
}

type attendanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAttendanceServiceClient(cc grpc.ClientConnInterface) AttendanceServiceClient {
	return &attendanceServiceClient{cc}
}

func (c *attendanceServiceClient) CreateAttendance(ctx context.Context, in *CreateAttendanceRequest, opts ...grpc.CallOption) (*CreateAttendanceResponse, error) {
	out := new(CreateAttendanceResponse)
	err := c.cc.Invoke(ctx, "/pb.AttendanceService/CreateAttendance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendanceServiceClient) UpdateAttendanceById(ctx context.Context, in *UpdateAttendanceByIdRequest, opts ...grpc.CallOption) (*UpdateAttendanceByIdResponse, error) {
	out := new(UpdateAttendanceByIdResponse)
	err := c.cc.Invoke(ctx, "/pb.AttendanceService/UpdateAttendanceById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendanceServiceClient) DeleteAttendanceById(ctx context.Context, in *DeleteAttendanceByIdRequest, opts ...grpc.CallOption) (*DeleteAttendanceByIdResponse, error) {
	out := new(DeleteAttendanceByIdResponse)
	err := c.cc.Invoke(ctx, "/pb.AttendanceService/DeleteAttendanceById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendanceServiceClient) FindAttendances(ctx context.Context, in *FindAttendancesRequest, opts ...grpc.CallOption) (*FindAttendancesResponse, error) {
	out := new(FindAttendancesResponse)
	err := c.cc.Invoke(ctx, "/pb.AttendanceService/FindAttendances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendanceServiceClient) FindAttendanceById(ctx context.Context, in *FindAttendanceByIdRequest, opts ...grpc.CallOption) (*FindAttendanceByIdResponse, error) {
	out := new(FindAttendanceByIdResponse)
	err := c.cc.Invoke(ctx, "/pb.AttendanceService/FindAttendanceById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttendanceServiceServer is the server API for AttendanceService service.
// All implementations must embed UnimplementedAttendanceServiceServer
// for forward compatibility
type AttendanceServiceServer interface {
	CreateAttendance(context.Context, *CreateAttendanceRequest) (*CreateAttendanceResponse, error)
	UpdateAttendanceById(context.Context, *UpdateAttendanceByIdRequest) (*UpdateAttendanceByIdResponse, error)
	DeleteAttendanceById(context.Context, *DeleteAttendanceByIdRequest) (*DeleteAttendanceByIdResponse, error)
	FindAttendances(context.Context, *FindAttendancesRequest) (*FindAttendancesResponse, error)
	FindAttendanceById(context.Context, *FindAttendanceByIdRequest) (*FindAttendanceByIdResponse, error)
	mustEmbedUnimplementedAttendanceServiceServer()
}

// UnimplementedAttendanceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAttendanceServiceServer struct {
}

func (UnimplementedAttendanceServiceServer) CreateAttendance(context.Context, *CreateAttendanceRequest) (*CreateAttendanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttendance not implemented")
}
func (UnimplementedAttendanceServiceServer) UpdateAttendanceById(context.Context, *UpdateAttendanceByIdRequest) (*UpdateAttendanceByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAttendanceById not implemented")
}
func (UnimplementedAttendanceServiceServer) DeleteAttendanceById(context.Context, *DeleteAttendanceByIdRequest) (*DeleteAttendanceByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttendanceById not implemented")
}
func (UnimplementedAttendanceServiceServer) FindAttendances(context.Context, *FindAttendancesRequest) (*FindAttendancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAttendances not implemented")
}
func (UnimplementedAttendanceServiceServer) FindAttendanceById(context.Context, *FindAttendanceByIdRequest) (*FindAttendanceByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAttendanceById not implemented")
}
func (UnimplementedAttendanceServiceServer) mustEmbedUnimplementedAttendanceServiceServer() {}

// UnsafeAttendanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttendanceServiceServer will
// result in compilation errors.
type UnsafeAttendanceServiceServer interface {
	mustEmbedUnimplementedAttendanceServiceServer()
}

func RegisterAttendanceServiceServer(s grpc.ServiceRegistrar, srv AttendanceServiceServer) {
	s.RegisterService(&AttendanceService_ServiceDesc, srv)
}

func _AttendanceService_CreateAttendance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttendanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceServiceServer).CreateAttendance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AttendanceService/CreateAttendance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceServiceServer).CreateAttendance(ctx, req.(*CreateAttendanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttendanceService_UpdateAttendanceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAttendanceByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceServiceServer).UpdateAttendanceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AttendanceService/UpdateAttendanceById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceServiceServer).UpdateAttendanceById(ctx, req.(*UpdateAttendanceByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttendanceService_DeleteAttendanceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttendanceByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceServiceServer).DeleteAttendanceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AttendanceService/DeleteAttendanceById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceServiceServer).DeleteAttendanceById(ctx, req.(*DeleteAttendanceByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttendanceService_FindAttendances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAttendancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceServiceServer).FindAttendances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AttendanceService/FindAttendances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceServiceServer).FindAttendances(ctx, req.(*FindAttendancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttendanceService_FindAttendanceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAttendanceByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceServiceServer).FindAttendanceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AttendanceService/FindAttendanceById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceServiceServer).FindAttendanceById(ctx, req.(*FindAttendanceByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AttendanceService_ServiceDesc is the grpc.ServiceDesc for AttendanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AttendanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AttendanceService",
	HandlerType: (*AttendanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAttendance",
			Handler:    _AttendanceService_CreateAttendance_Handler,
		},
		{
			MethodName: "UpdateAttendanceById",
			Handler:    _AttendanceService_UpdateAttendanceById_Handler,
		},
		{
			MethodName: "DeleteAttendanceById",
			Handler:    _AttendanceService_DeleteAttendanceById_Handler,
		},
		{
			MethodName: "FindAttendances",
			Handler:    _AttendanceService_FindAttendances_Handler,
		},
		{
			MethodName: "FindAttendanceById",
			Handler:    _AttendanceService_FindAttendanceById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "attendance.proto",
}
