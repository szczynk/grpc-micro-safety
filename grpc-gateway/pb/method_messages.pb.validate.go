// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: method_messages.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Method with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Method) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Method with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MethodMultiError, or nil if none found.
func (m *Method) ValidateAll() error {
	return m.validate(true)
}

func (m *Method) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Method

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MethodValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MethodValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MethodValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MethodValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MethodValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MethodValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MethodMultiError(errors)
	}

	return nil
}

// MethodMultiError is an error wrapping multiple validation errors returned by
// Method.ValidateAll() if the designated constraints aren't met.
type MethodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MethodMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MethodMultiError) AllErrors() []error { return m }

// MethodValidationError is the validation error returned by Method.Validate if
// the designated constraints aren't met.
type MethodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MethodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MethodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MethodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MethodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MethodValidationError) ErrorName() string { return "MethodValidationError" }

// Error satisfies the builtin error interface
func (e MethodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMethod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MethodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MethodValidationError{}

// Validate checks the field values on CreateMethodRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMethodRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMethodRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMethodRequestMultiError, or nil if none found.
func (m *CreateMethodRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMethodRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Method

	if len(errors) > 0 {
		return CreateMethodRequestMultiError(errors)
	}

	return nil
}

// CreateMethodRequestMultiError is an error wrapping multiple validation
// errors returned by CreateMethodRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMethodRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMethodRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMethodRequestMultiError) AllErrors() []error { return m }

// CreateMethodRequestValidationError is the validation error returned by
// CreateMethodRequest.Validate if the designated constraints aren't met.
type CreateMethodRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMethodRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMethodRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMethodRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMethodRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMethodRequestValidationError) ErrorName() string {
	return "CreateMethodRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMethodRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMethodRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMethodRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMethodRequestValidationError{}

// Validate checks the field values on CreateMethodResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMethodResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMethodResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMethodResponseMultiError, or nil if none found.
func (m *CreateMethodResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMethodResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMethod()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMethodResponseValidationError{
					field:  "Method",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMethodResponseValidationError{
					field:  "Method",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMethod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMethodResponseValidationError{
				field:  "Method",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMethodResponseMultiError(errors)
	}

	return nil
}

// CreateMethodResponseMultiError is an error wrapping multiple validation
// errors returned by CreateMethodResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateMethodResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMethodResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMethodResponseMultiError) AllErrors() []error { return m }

// CreateMethodResponseValidationError is the validation error returned by
// CreateMethodResponse.Validate if the designated constraints aren't met.
type CreateMethodResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMethodResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMethodResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMethodResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMethodResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMethodResponseValidationError) ErrorName() string {
	return "CreateMethodResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMethodResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMethodResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMethodResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMethodResponseValidationError{}

// Validate checks the field values on DeleteMethodByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMethodByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMethodByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMethodByIdRequestMultiError, or nil if none found.
func (m *DeleteMethodByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMethodByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteMethodByIdRequestMultiError(errors)
	}

	return nil
}

// DeleteMethodByIdRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteMethodByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteMethodByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMethodByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMethodByIdRequestMultiError) AllErrors() []error { return m }

// DeleteMethodByIdRequestValidationError is the validation error returned by
// DeleteMethodByIdRequest.Validate if the designated constraints aren't met.
type DeleteMethodByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMethodByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMethodByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMethodByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMethodByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMethodByIdRequestValidationError) ErrorName() string {
	return "DeleteMethodByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMethodByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMethodByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMethodByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMethodByIdRequestValidationError{}

// Validate checks the field values on DeleteMethodByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMethodByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMethodByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMethodByIdResponseMultiError, or nil if none found.
func (m *DeleteMethodByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMethodByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteMethodByIdResponseMultiError(errors)
	}

	return nil
}

// DeleteMethodByIdResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteMethodByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteMethodByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMethodByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMethodByIdResponseMultiError) AllErrors() []error { return m }

// DeleteMethodByIdResponseValidationError is the validation error returned by
// DeleteMethodByIdResponse.Validate if the designated constraints aren't met.
type DeleteMethodByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMethodByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMethodByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMethodByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMethodByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMethodByIdResponseValidationError) ErrorName() string {
	return "DeleteMethodByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMethodByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMethodByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMethodByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMethodByIdResponseValidationError{}

// Validate checks the field values on FindMethodsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindMethodsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindMethodsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindMethodsRequestMultiError, or nil if none found.
func (m *FindMethodsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindMethodsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Method

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for Sort

	if len(errors) > 0 {
		return FindMethodsRequestMultiError(errors)
	}

	return nil
}

// FindMethodsRequestMultiError is an error wrapping multiple validation errors
// returned by FindMethodsRequest.ValidateAll() if the designated constraints
// aren't met.
type FindMethodsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindMethodsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindMethodsRequestMultiError) AllErrors() []error { return m }

// FindMethodsRequestValidationError is the validation error returned by
// FindMethodsRequest.Validate if the designated constraints aren't met.
type FindMethodsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindMethodsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindMethodsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindMethodsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindMethodsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindMethodsRequestValidationError) ErrorName() string {
	return "FindMethodsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindMethodsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindMethodsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindMethodsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindMethodsRequestValidationError{}

// Validate checks the field values on FindMethodsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindMethodsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindMethodsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindMethodsResponseMultiError, or nil if none found.
func (m *FindMethodsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindMethodsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalCount

	// no validation rules for TotalPages

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for HasMore

	for idx, item := range m.GetMethods() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindMethodsResponseValidationError{
						field:  fmt.Sprintf("Methods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindMethodsResponseValidationError{
						field:  fmt.Sprintf("Methods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindMethodsResponseValidationError{
					field:  fmt.Sprintf("Methods[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FindMethodsResponseMultiError(errors)
	}

	return nil
}

// FindMethodsResponseMultiError is an error wrapping multiple validation
// errors returned by FindMethodsResponse.ValidateAll() if the designated
// constraints aren't met.
type FindMethodsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindMethodsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindMethodsResponseMultiError) AllErrors() []error { return m }

// FindMethodsResponseValidationError is the validation error returned by
// FindMethodsResponse.Validate if the designated constraints aren't met.
type FindMethodsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindMethodsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindMethodsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindMethodsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindMethodsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindMethodsResponseValidationError) ErrorName() string {
	return "FindMethodsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindMethodsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindMethodsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindMethodsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindMethodsResponseValidationError{}
