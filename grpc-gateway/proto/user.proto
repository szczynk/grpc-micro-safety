syntax = "proto3";

package pb;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "user_messages.proto";

option go_package = "./;pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "User API";
		version: "0.0.1";
	};
  security_definitions: {
    security: {
      key: "bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Authentication token, prefixed by Bearer: Bearer <token>"
      }
    }
  };
  security: {
    security_requirement: {
      key: "bearer"
    }
  };
};

service UserService{
  rpc RefreshAccessToken (RefreshAccessTokenRequest) returns (RefreshAccessTokenResponse){
    option (google.api.http) = {
			post: "/auth/refresh-token"
			body: "*"
		};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to renew access token";
      summary: "Renew Access Token";
    };
  }
  rpc UpdateMe (UpdateMeRequest) returns (UpdateMeResponse) {
    option (google.api.http) = {
      patch: "/auth/me"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to update user";
      summary: "Update user by his token";
    };
  };
  rpc ChangeEmail (ChangeEmailRequest) returns (ChangeEmailResponse) {
    option (google.api.http) = {
      post: "/auth/change-email"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to change email a user";
      summary: "Change email a user";
    };
  };
  rpc Logout (LogoutRequest) returns (LogoutResponse){
    option (google.api.http) = {
			post: "/auth/logout"
			body: "*"
		};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to logout";
      summary: "Logout";
    };
  }

  rpc GetMe (GetMeRequest) returns(GetMeResponse){
    option (google.api.http) = {
      get: "/auth/me"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to get user data";
      summary: "Get User Data";
    };
  };


  
  rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      post: "/users"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to create a new user";
      summary: "Create a new user";
    };
  };
  rpc UpdateUserById (UpdateUserByIdRequest) returns (UpdateUserByIdResponse) {
    option (google.api.http) = {
      patch: "/users/{id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to update user by id";
      summary: "Update user by id";
    };
  };
  rpc DeleteUserById (DeleteUserByIdRequest) returns (DeleteUserByIdResponse) {
    option (google.api.http) = {
      delete: "/users/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to delete user by id";
      summary: "Delete user by id";
    };
  };

  rpc FindUsers (FindUsersRequest)returns (FindUsersResponse){
    option (google.api.http) = {
			get: "/users"
		};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to find users";
      summary: "Find Users";
    };
  }
  rpc FindUserById (FindUserByIdRequest) returns (FindUserByIdResponse) {
    option (google.api.http) = {
			get: "/users/{id}"
		};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to find user by id";
      summary: "Find User By Id";
    };
  };
}