syntax = "proto3";

package pb;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "check_messages.proto";

option go_package = "./;pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "Check API";
		version: "0.0.1";
	};
  security_definitions: {
    security: {
      key: "bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Authentication token, prefixed by Bearer: Bearer <token>"
      }
    }
  };
  security: {
    security_requirement: {
      key: "bearer"
    }
  };
};

service CheckService{
  rpc CheckIn (CheckInRequest) returns (CheckInResponse) {
    option (google.api.http) = {
      patch: "/check-in/{attendance_id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to update check in by id";
      summary: "Update check in by attendance id";
    };
  };
  rpc CheckOut (CheckOutRequest) returns (CheckOutResponse) {
    option (google.api.http) = {
      patch: "/check-out/{attendance_id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to update check out by id";
      summary: "Update check out by attendance id";
    };
  };

  rpc FindChecks (FindChecksRequest)returns (FindChecksResponse){
    option (google.api.http) = {
			get: "/checks"
		};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to find checks";
      summary: "Find Checks";
    };
  }
  rpc FindCheckById (FindCheckByIdRequest) returns (FindCheckByIdResponse) {
    option (google.api.http) = {
			get: "/checks/{attendance_id}"
		};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to find check by id";
      summary: "Find Check By Id";
    };
  };
}