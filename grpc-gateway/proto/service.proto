syntax = "proto3";

package pb;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "service_messages.proto";

option go_package = "./;pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "Service API";
		version: "0.0.1";
	};
  security_definitions: {
    security: {
      key: "bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Authentication token, prefixed by Bearer: Bearer <token>"
      }
    }
  };
  security: {
    security_requirement: {
      key: "bearer"
    }
  };
};

service ServiceService{
  rpc CreateService (CreateServiceRequest) returns (CreateServiceResponse) {
    option (google.api.http) = {
      post: "/services"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to create a new service";
      summary: "Create a new service";
    };
  };
  rpc DeleteServiceById (DeleteServiceByIdRequest) returns (DeleteServiceByIdResponse) {
    option (google.api.http) = {
      delete: "/services/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to delete service by id";
      summary: "Delete service by id";
    };
  };

  rpc FindServices (FindServicesRequest)returns (FindServicesResponse){
    option (google.api.http) = {
			get: "/services"
		};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to find services";
      summary: "Find Services";
    };
  }
}