version: "3"

volumes:
  postgres1:
  postgres2:
  postgres3:
  pgadmin:
  redis:
  kafka1_data:
  kafka1_secrets:
  zoo1_data:
  zoo1_log:
  zoo1_secrets:
  minio:
  mailhog:
  jaeger:


services:
  postgres1:
    image: szczynk/postgres_cron:15.1
    container_name: postgres1
    volumes:
      - ./postgres/safety:/docker-entrypoint-initdb.d/
      - postgres1:/var/lib/postgresql/data
    ports:
      - 5432:5432
    command: postgres -c config_file=/etc/postgresql/postgresql.conf 
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${PG1_PASSWORD:-postgres}
      POSTGRES_DB: safety
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --username postgres" ]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 1s

  postgres2:
    image: szczynk/postgres_cron:15.1
    container_name: postgres2
    volumes:
      - ./postgres/account:/docker-entrypoint-initdb.d/
      - postgres2:/var/lib/postgresql/data
    ports:
      - 15432:5432
    command: postgres -c config_file=/etc/postgresql/postgresql.conf 
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${PG2_PASSWORD:-postgres}
      POSTGRES_DB: account
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --username postgres" ]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 1s

  postgres3:
    image: szczynk/postgres_cron:15.1
    container_name: postgres3
    volumes:
      - ./postgres/casbin:/docker-entrypoint-initdb.d/
      - postgres3:/var/lib/postgresql/data
    ports:
      - 25432:5432
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${PG3_PASSWORD:-postgres}
      POSTGRES_DB: casbin
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --username postgres" ]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 1s

  pgadmin:
    image: dpage/pgadmin4:6.19
    container_name: pgadmin
    volumes:
      - ./pgadmin4/servers.json:/pgadmin4/servers.json
      - pgadmin:/var/lib/pgadmin
    ports:
      - 5050:80
    environment:
      PGADMIN_DEFAULT_EMAIL: pgadmin4@pgadmin.org
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    depends_on:
      postgres1:
        condition: service_healthy
      postgres2:
        condition: service_healthy
      postgres3:
        condition: service_healthy

  casbin-server:
    image: szczynk/casbin-service
    container_name: casbin-server
    ports:
      - 50051:50051
    healthcheck:
      test: [ "CMD-SHELL", "nc -vz localhost 50051" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 1s

  redis:
    image: redis:7.0.7-alpine
    container_name: redis
    entrypoint: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-admin}
    ports:
      - 6379:6379
    volumes:
      - redis:/data

  zoo1:
    image: confluentinc/cp-zookeeper:7.3.0
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888
    volumes:
      - type: volume
        source: zoo1_data
        target: /var/lib/zookeeper/data
      - type: volume
        source: zoo1_log
        target: /var/lib/zookeeper/log
      - type: volume
        source: zoo1_secrets
        target: /etc/zookeeper/secrets
    healthcheck:
      test: [ "CMD-SHELL", "nc -vz localhost 2181" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 1s

  kafka1:
    image: confluentinc/cp-kafka:7.3.0
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    volumes:
      - type: volume
        source: kafka1_data
        target: /var/lib/kafka/data
      - type: volume
        source: kafka1_secrets
        target: /etc/kafka/secrets
    depends_on:
      - zoo1
    healthcheck:
      test: [ "CMD-SHELL", "nc -vz localhost 9092" ]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio:/data
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio-secret
    command: server --console-address ":9001" /data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -f http://localhost:9000/minio/health/live"
        ]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 1s

  mailhog:
    image: mailhog/mailhog
    container_name: 'mailhog'
    ports:
      - "1025:1025"
      - "8025:8025"
    volumes:
      - mailhog:/maildir
    environment:
      MH_STORAGE: maildir

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "16686:16686"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "4317:4317"
      - "4318:4318"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "9411:9411"
    volumes:
      - jaeger:/badger
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: ":9411"
      COLLECTOR_OTLP_ENABLED: "true"
      SPAN_STORAGE_TYPE: badger
      BADGER_EPHEMERAL: "false"
      BADGER_DIRECTORY_VALUE: /badger/data
      BADGER_DIRECTORY_KEY: /badger/key
